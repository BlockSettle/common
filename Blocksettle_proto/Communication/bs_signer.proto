syntax = "proto3";

package Blocksettle.Communication.signer;
import "Blocksettle_Communication_Internal.proto";

enum PacketType
{
   HeadlessReadyType = 0;
   PeerConnectedType = 1;
   PeerDisconnectedType = 2;
   SignTxRequestType = 3;
   TxSignedType = 4;
   CancelTxSignType = 5;
   XbtSpentType = 6;

   // Send wallet id and wallet password to headless to enable auto signing
   // Request from ui, response from headless
   AutoSignActType = 7;

   SignOfflineTxRequestType = 8;
   SyncWalletInfoType = 9;
   SyncHDWalletType = 10;
   SyncWalletType = 11;
   CreateWOType = 12;
   GetDecryptedNodeType = 13;
   SetLimitsType = 14;
   PasswordReceivedType = 15;
   RequestCloseType = 16;
   ReloadWalletsType = 18;

   // Execute QML dialog by it's name
   // Request from headless, no response from ui
   ExecCustomDialogRequestType = 19;

   ChangePasswordRequestType   = 20;

   // Uses messages from headless
   CreateHDWalletType = 21;
   DeleteHDWalletType = 22;

   // Sent from headless signer when wallet added, removed or changed somehow (request body is empty)
   WalletsListUpdatedType = 23;

   // Send headless public key to signer ui to export it
   HeadlessPubKeyRequestType = 24;

   SyncSettingsRequestType = 25;

   UpdateStatusType = 26;

   ImportWoWalletType = 27;

   SignSettlementTxRequestType = 28;

   // Sent from headless signer when unknown terminal is trying to connect
   TerminalHandshakeFailedType = 29;
}

message Packet
{
   uint32      id         = 1;
   PacketType  type       = 2;
   bytes       data       = 3;
}

////////////////////////////////////////////////////////////////////////////////

message KeyPair
{
   string id = 1;
   // In hex format
   string key = 2;
}

enum Setting {
   SettingInvalid = 0;
   OfflineMode = 1;
   TestNet = 2;
   WatchingOnly = 3;
   ExportWalletsDir = 4;
   AutoSignWallet = 5;
   ListenAddress = 6;
   ListenPort = 7;
   LimitManualXBT = 8;
   LimitAutoSignXBT = 9;
   LimitAutoSignTime = 10;
   LimitManualPwKeep = 11;
   HideEidInfoBox = 12;
   TrustedTerminals = 13;
   TwoWaySignerAuth = 14;
};

message Settings
{
   bool offline = 1;
   bool test_net = 2;
   bool watching_only = 3;
   string export_wallets_dir = 4;
   string auto_sign_wallet = 11;
   string listen_address = 5;
   int32 listen_port = 6;
   uint64 limit_manual_xbt = 7;
   uint64 limit_auto_sign_xbt = 8;
   int32 limit_auto_sign_time = 9;
   int32 limit_pass_keep_time = 10;
   bool hide_eid_info_box = 12;
   repeated KeyPair trusted_terminals = 13;
   bool two_way_signer_auth = 14;
}

// Keep in sync with bs::signer::BindStatus
enum BindStatus
{
   BindInactive = 0;
   BindSucceed = 1;
   BindFailed = 2;
}

////////////////////////////////////////////////////////////////////////////////

message PeerEvent
{
   string ip_address = 1;
}

message SignTxRequest
{
   message Change {
      bytes    address = 1;
      string   index = 2;
      uint64   value = 3;
   }

   string prompt = 2;
   string wallet_id = 3;
   repeated bytes inputs = 4;
   repeated bytes recipients = 5;
   uint64         fee = 6;
   bool           RBF = 7;
   Change         change = 8;
}

message SignTxEvent
{
   uint32         errorCode = 1;
   bytes          signedTX = 2;
   //bytes          tx_hash = 3;
}

message SignTxCancelRequest
{
   bytes  tx_hash = 1;
}

message SignSettlementTxRequest
{
   SignTxRequest signTXRequest                                        = 1;
   Blocksettle.Communication.Internal.SettlementInfo settlementInfo   = 2;
}

message XbtSpentEvent
{
   int64 value = 1;
   bool  auto_sign = 2;
}


message SignOfflineTxRequest
{
   SignTxRequest tx_request = 1;
   bytes password = 2;
}


// Slightly simplified structures from headless.proto
enum WalletFormat
{
   WalletFormatUnknown    = 0;
   WalletFormatHD         = 1;
   WalletFormatSettlement = 2;
}

message SyncWalletInfoResponse
{
   message WalletInfo {
      WalletFormat format = 1;
      string id = 2;
      string name = 3;
      string description = 4;
      bool   watching_only = 5;
   }
   repeated WalletInfo wallets = 1;
}


message SyncWalletRequest
{
   string wallet_id = 1;
}

message SyncHDWalletResponse
{
   message Leaf {
      string id = 1;
      uint32 index = 2;
   }
   message Group {
      uint32 type = 1;
      repeated Leaf leaves = 2;
   }

   string wallet_id = 1;
   repeated Group groups = 2;
}

enum EncryptionType
{
   EncryptionTypeUnencrypted = 0;
   EncryptionTypePassword    = 1;
   EncryptionTypeAutheID     = 2;
}

message SyncWalletResponse
{
   string wallet_id = 1;
   repeated EncryptionType encryption_types = 2;
   repeated bytes encryption_keys = 3;
   uint32 key_rank_m = 4;
   uint32 key_rank_n = 5;

   message Address {
      string index = 1;
      string address = 2;
   }
   repeated Address   addresses = 6;
}


message DecryptWalletEvent
{
   uint32   errorCode = 1;
   string   wallet_id = 2;
   string   password = 3;
}

message CreateWatchingOnlyResponse
{
   message Address {
      string index = 1;
      uint32 aet = 2;
   }
   message Leaf {
      string id = 1;
      uint32 index = 2;
      bytes  public_key = 3;
      bytes  chain_code = 4;
      repeated Address addresses = 5;
   }
   message Group {
      uint32 type = 1;
      repeated Leaf leaves = 2;
   }

   string wallet_id = 1;
   string name = 2;
   string description = 3;
   repeated Group groups = 4;
}

message DecryptedNodeResponse
{
   string wallet_id = 1;
   bytes  private_key = 2;
   bytes  chain_code = 3;
}

message SetLimitsRequest
{
   string wallet_id = 1;
   uint64 auto_sign_satoshis = 2;
   uint64 manual_satoshis = 3;
   uint32 auto_sign_time = 4;
   uint32 password_keep_in_mem = 5;
}

message ReloadWalletsRequest
{
   string path = 1;
}

message CustomDialogRequest
{
   string dialogName = 1;
   bytes  variantData = 2;
}


message PasswordData
{
   string   password = 1;
   uint32   encType = 2;
   bytes    encKey = 3;
}

message ChangePasswordRequest
{
   string   rootWalletId = 1;
   string   oldPassword = 2;
   repeated PasswordData newPassword = 3;
   uint32   rankM = 4;
   uint32   rankN = 5;
   bool     addNew = 6;
   bool     removeOld = 8;
   bool     dryRun = 7;
}

message ChangePasswordResponse
{
   string   rootWalletId = 1;
   bool     success = 2;
}

message HeadlessPubKeyRequest
{
}

message HeadlessPubKeyResponse
{
   string pubKey = 1;
}

message AutoSignActRequest
{
   string   rootWalletId = 1;
   bytes    password = 2;
   bool     activateAutoSign = 3;
}

message AutoSignActResponse
{
   uint32   errorCode = 1;
   string   rootWalletId = 2;
   bool     autoSignActive = 3;
}

// Would be sent from headless process to the GUI when some status changes
message UpdateStatus
{
   BindStatus signer_bind_status = 1;
}

message ImportWoWalletRequest
{
   string filename = 1;
   bytes  content = 2;
}

message TerminalHandshakeFailed
{
   string peerAddress = 1;
}
