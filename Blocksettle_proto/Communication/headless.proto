syntax = "proto3";

package Blocksettle.Communication.headless;
import "Blocksettle_Communication_Internal.proto";

enum RequestType
{
   InvalidRequestType          = 0;
   AuthenticationRequestType   = 1;
   SignTxRequestType           = 2;
   SignPartialTXRequestType    = 3;
   SignPayoutTXRequestType     = 4;
   PasswordRequestType         = 5;
   SetUserIdType               = 6;
   CreateSettlWalletType       = 7;
   CreateHDWalletRequestType   = 8;
   DeleteHDWalletRequestType   = 9;
   GetRootKeyRequestType       = 10;
   AutoSignActType             = 11;
   GetHDWalletInfoRequestType  = 12;
   DisconnectionRequestType    = 13;
   SignTXMultiRequestType      = 14;
   CancelSignTxRequestType     = 15;
   SyncWalletInfoType          = 16;
   SyncHDWalletType            = 17;
   SyncWalletType              = 18;
   SyncCommentType             = 19;
   SyncAddressesType           = 20;
   ExecCustomDialogRequestType = 21;
   // Sent from headless signer when wallet added, removed or changed somehow (request body is empty)
   WalletsListUpdatedType      = 22;
   ExtendAddressChainType      = 23;
   SyncNewAddressType	       = 24;
   SignSettlementTxRequestType = 25;
   SignSettlementPartialTxRequestType = 26;
   SignSettlementPayoutTxRequestType = 27;
}

message RequestPacket
{
   uint32      id         = 1;
   bytes       authTicket = 2;
   RequestType type       = 3;
   bytes       data       = 4;
}

message ResponsePacket
{
   uint32      id   = 1;
   RequestType type = 2;
   bytes       data = 3;
}

service PacketService {
   rpc Packet (RequestPacket) returns (ResponsePacket);
}


enum NetworkType
{
   MainNetType = 0;
   TestNetType = 1;
}


message AuthenticationRequest
{
   NetworkType  netType = 1;
}

message AuthenticationReply
{
   oneof result {
      bytes authTicket = 1;
      string   error = 2;
   }
   NetworkType  netType = 3;
}


message Change
{
   bytes    address = 1;
   string   index = 2;
   uint64   value = 3;
}

message SignTxRequest
{
   string         walletId = 1;
   repeated bytes inputs = 2;
   repeated bytes recipients = 3;
   uint64         fee = 4;
   bool           RBF = 5;
   bytes          unsignedState = 6;
   Change         change = 7;
   bool           populateUTXOs = 8;
   string         password = 10;
   bool           keepDuplicatedRecipients = 11;
}

message SignTxReply
{
   uint32         errorCode = 1;
   bytes          signedTX = 2;
   Change         change = 3;
}

message CancelSignTx
{
   bytes txId = 1;
}

message SignSettlementTxRequest
{
   SignTxRequest signTxRequest                                        = 1;
   Blocksettle.Communication.Internal.SettlementInfo settlementInfo   = 2;
}

message SignSettlementPayoutTxRequest
{
   SignPayoutTXRequest signPayoutTXRequest                            = 1;
   Blocksettle.Communication.Internal.SettlementInfo settlementInfo   = 2;
}

message SignPayoutTXRequest
{
   bytes    input = 1;
   bytes    recipient = 2;
   string   authAddress = 3;
   bytes    settlementId = 4;
   string   password = 8;
}

message PasswordRequest
{
   string   walletId = 1;
   string   prompt = 2;
   repeated uint32 encTypes = 3;
   repeated bytes  encKeys = 4;
   uint32   rankM = 5;
}

message PasswordReply
{
   uint32   errorCode = 1;
   string   walletId = 2;
   string   password = 3;
}


message SetUserIdRequest
{
   bytes userId = 1;
}

enum AuthWalletResponseType
{
   AWR_NoError       = 0;
   AWR_NoPrimary     = 1;
   AWR_WrongSalt     = 2;
   AWR_NotDecrypted  = 3;
   AWR_SaltSetFailed = 4;
   AWR_UnsetSalt     = 5;
}

message SetUserIdResponse
{
   string auth_wallet_id = 1;
   AuthWalletResponseType response = 2;
}


message NewHDLeaf
{
   string   rootWalletId = 1;
   string   path = 2;
}

message NewHDWallet
{
   string   name = 1;
   string   description = 2;
   NetworkType  netType = 3;
   bool     primary = 4;
   bytes    privateKey = 5;
   bytes    seed = 6;
   bytes    chainCode = 7;
}

message PasswordData
{
   bytes   password = 1;
   uint32   encType = 2;
   bytes    encKey = 3;
}

message CreateHDWalletRequest
{
   oneof create {
      NewHDWallet wallet = 1;
      NewHDLeaf   leaf   = 2;
   }
   repeated PasswordData password = 3;
   uint32   rankM = 4;
   uint32   rankN = 5;
}

message HDLeafWO
{
   string   name = 1;
   string   desc = 2;
   string   walletId = 3;
   string   path = 4;
   bool     extOnly = 5;
}

message HDGroupWO
{
   string   path = 1;
}

message HDWalletWO
{
   string walletId = 1;
   string name     = 2;
   string description = 3;
   NetworkType       netType = 4;
   repeated HDGroupWO groups = 5;
   repeated HDLeafWO  leaves = 6;
}

message CreateHDWalletResponse
{
   oneof result {
      HDWalletWO wallet = 1;
      HDLeafWO  leaf   = 2;
      string    error  = 3;
   }
}


message DeleteHDWalletRequest
{
   oneof delete {
      string   rootWalletId = 1;
      string   leafWalletId = 2;
   }
}

message DeleteHDWalletResponse
{
   bool     success = 1;
   string   error = 2;
}


message AutoSignActEvent
{
   string   rootWalletId = 1;
   bool     autoSignActive = 2;
}


message GetHDWalletInfoRequest
{
   string   rootWalletId = 1;
}

message GetHDWalletInfoResponse
{
   repeated uint32 encTypes = 1;
   repeated bytes encKeys = 2;
   uint32	rankM = 3;
   uint32	rankN = 4;
   string       error = 5;
   string       rootWalletId = 6;
}


message SignTXMultiRequest
{
   repeated string   walletIds = 1;
   bytes             signerState = 2;
}


enum WalletFormat
{
   WalletFormatUnknown    = 0;
   WalletFormatHD         = 1;
   WalletFormatPlain      = 2;
   WalletFormatSettlement = 3;
}

message SyncWalletInfoResponse
{
   message WalletInfo {
      WalletFormat format = 1;
      string id = 2;
      string name = 3;
      string description = 4;
      NetworkType netType = 5;
      bool watching_only = 6;
   }
   repeated WalletInfo wallets = 1;
}


message SyncWalletRequest
{
   string walletId = 1;
}

message SyncHDWalletResponse
{
   message Leaf {
      string id = 1;
      uint32 index = 2;
   }
   message Group {
      uint32 type = 1;
      repeated Leaf leaves = 2;
      bool ext_only = 3;
   }

   string walletId = 1;
   repeated Group groups = 2;
}

enum EncryptionType
{
   EncryptionTypeUnencrypted = 0;
   EncryptionTypePassword    = 1;
   EncryptionTypeAutheID     = 2;
}

message SyncWalletResponse
{
   message WalletKeyRank {
      uint32 m = 1;
      uint32 n = 2;
   }
   message Address {
      string index = 1;
      string address = 2;
      string comment = 3;
   }
   message TxComment {
      bytes  txHash = 1;
      string comment = 2;
   }

   string walletId = 1;
   repeated EncryptionType encryptionTypes = 2;
   repeated bytes encryptionKeys = 3;
   WalletKeyRank keyRank = 4;
   NetworkType netType = 5;
   uint32 highest_ext_index = 9;
   uint32 highest_int_index = 10;

   repeated Address   addresses = 6;
   repeated Address   addrPool = 7;
   repeated TxComment txComments = 8;
}

message SyncCommentRequest
{
   string walletId = 1;
   oneof key {
      string address = 2;
      bytes  txHash = 3;
   }
   string comment = 4;
}


enum SyncState
{
   SyncState_Success = 0;
   SyncState_NothingToDo = 1;
   SyncState_Failure = 2;
}

message SyncAddressesRequest
{
   string wallet_id = 1;
   repeated bytes addresses = 2;
}

message SyncAddressesResponse
{
   string wallet_id = 1;
   SyncState state = 2;
}

message ExtendAddressChainRequest
{
   string wallet_id = 1;
   uint32 count = 2;
   bool   ext_int = 3;
}

message ExtendAddressChainResponse
{
   message AddressPair {
      string address = 1;
      string index = 2;
   }
   string wallet_id = 1;
   repeated AddressPair addresses = 2;
}

message SettlWalletResponse
{
   string walletId = 1;
   string name = 2;
   string description = 3;
}


message CustomDialogRequest
{
   string dialogName = 1;
   bytes  variantData = 2;
}


message SyncNewAddressRequest
{
   message Address {
      string index = 1;
      uint32 aet = 2;
   }
   string wallet_id = 1;
   repeated Address addresses = 2;
   
}
