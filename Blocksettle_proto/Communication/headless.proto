syntax = "proto3";

package Blocksettle.Communication.headless;


enum RequestType
{
   HeartbeatType               = 0;
   AuthenticationRequestType   = 1;
   SignTXRequestType           = 2;
   SignPartialTXRequestType    = 3;
   SignPayoutTXRequestType     = 4;
   PasswordRequestType         = 5;
   SetUserIdRequestType        = 6;
   SyncAddressRequestType      = 7;
   CreateHDWalletRequestType   = 8;
   DeleteHDWalletRequestType   = 9;
   GetRootKeyRequestType       = 10;
   SetLimitsRequestType        = 11;
   GetHDWalletInfoRequestType  = 12;
   DisconnectionRequestType    = 13;
   SignTXMultiRequestType      = 14;
   ChangePasswordRequestType   = 15;
   CancelSignTxRequestType     = 16;
}

message RequestPacket
{
   uint32      id         = 1;
   bytes       authTicket = 2;
   RequestType type       = 3;
   bytes       data       = 4;
}

message ResponsePacket
{
   uint32      id   = 1;
   RequestType type = 2;
   bytes       data = 3;
}

service PacketService {
   rpc Packet (RequestPacket) returns (ResponsePacket);
}


enum NetworkType
{
   MainNetType = 0;
   TestNetType = 1;
}


message AuthenticationRequest
{
   string   password = 1;  // probably not needed here
   NetworkType  netType = 2;
}

message AuthenticationReply
{
   oneof result {
      bytes authTicket = 1;
      string   error = 2;
   }
   bool     hasUI = 3;
   NetworkType  netType = 4;
}


message Change
{
   bytes    address = 1;
   string   index = 2;
   uint64   value = 3;
}

message SignTXRequest
{
   string         walletId = 1;
   repeated bytes inputs = 2;
   repeated bytes recipients = 3;
   uint64         fee = 4;
   bool           RBF = 5;
   bytes          unsignedState = 6;
   Change         change = 7;
   bool           populateUTXOs = 8;
   bool           applyAutoSignRules = 9;
   string         password = 10;
   bool           keepDuplicatedRecipients = 11;
}

message SignTXReply
{
   oneof result {
      bytes signedTX = 1;
      string   error = 2;
   }
   Change   change = 3;
   bool     cancelledByUser = 4;
}

message CancelSignTx
{
   bytes txId = 1;
}

message SignPayoutTXRequest
{
   bytes    input = 1;
   bytes    recipient = 2;
   string   authAddress = 3;
   bytes    settlementId = 4;
   bytes    buyAuthKey = 5;
   bytes    sellAuthKey = 6;
   bool     applyAutoSignRules = 7;
   string   password = 8;
}

message PasswordRequest
{
   string   walletId = 1;
   string   prompt = 2;
   repeated uint32 encTypes = 3;
   repeated bytes  encKeys = 4;
   uint32   rankM = 5;
}

message PasswordReply
{
   string   walletId = 1;
   string   password = 2;
   bool     cancelledByUser = 3;
}


message SetUserIdRequest
{
   bytes userId = 1;
}


enum AddressType
{
   LegacyAddressType = 0;
   NestedSWAddressType  = 1;
   NativeSWAddressType  = 2;
}

message AddressIndex
{
   string   walletId = 1;
   string   index = 2;
   AddressType addrType = 3;
}

message SyncAddressRequest
{
   repeated AddressIndex address = 1;
}

message SyncAddressResponse
{
   repeated string    missingWalletId = 1;
   repeated AddressIndex failedAddress = 2;
}


message NewHDLeaf
{
   string   rootWalletId = 1;
   string   path = 2;
}

message NewHDWallet
{
   string   name = 1;
   string   description = 2;
   NetworkType  netType = 3;
   bool     primary = 4;
   bytes    privateKey = 5;
   bytes    seed = 6;
}

message PasswordData
{
   string   password = 1;
   uint32   encType = 2;
   bytes    encKey = 3;
}

message CreateHDWalletRequest
{
   oneof create {
      NewHDWallet wallet = 1;
      NewHDLeaf   leaf   = 2;
   }
   repeated PasswordData password = 3;
   uint32   rankM = 4;
   uint32   rankN = 5;
}

message HDLeafWO
{
   bytes pubKey = 1;
   bytes chainCode = 2;
   string   walletId = 3;
   string   path = 4;
}

message HDGroupWO
{
   string   path = 1;
   string   name = 2;
}

message HDWalletWO
{
   string walletId = 1;
   string name     = 2;
   string description = 3;
   NetworkType       netType = 4;
   repeated HDGroupWO groups = 5;
   repeated HDLeafWO  leaves = 6;
}

message CreateHDWalletResponse
{
   oneof result {
      HDWalletWO wallet = 1;
      HDLeafWO  leaf   = 2;
      string    error  = 3;
   }
}


message DeleteHDWalletRequest
{
   oneof delete {
      string   rootWalletId = 1;
      string   leafWalletId = 2;
   }
}


message GetRootKeyRequest
{
   string   rootWalletId = 1;
   string   password = 2;
}

message GetRootKeyResponse
{
   string   walletId = 1;
   bytes decryptedPrivKey = 2;
   bytes chainCode = 3;
}


message SetLimitsRequest
{
   string   rootWalletId = 1;
   string   password = 2;
   bool     activateAutoSign = 3;
}

message SetLimitsResponse
{
   string   rootWalletId = 1;
   bool     autoSignActive = 2;
   string   error = 3;
}


message GetHDWalletInfoRequest
{
   string   rootWalletId = 1;
}

message GetHDWalletInfoResponse
{
   repeated uint32 encTypes = 1;
   repeated bytes encKeys = 2;
   uint32	rankM = 3;
   uint32	rankN = 4;
   string       error = 5;
   string       rootWalletId = 6;
}


message SignTXMultiRequest
{
   repeated string   walletIds = 1;
   bytes             signerState = 2;
}


message ChangePasswordRequest
{
   string   rootWalletId = 1;
   string   oldPassword = 2;
   repeated PasswordData newPassword = 3;
   uint32   rankM = 4;
   uint32   rankN = 5;
   bool     addNew = 6;
   bool     removeOld = 8;
   bool     dryRun = 7;
}

message ChangePasswordResponse
{
   string   rootWalletId = 1;
   bool     success = 2;
}
