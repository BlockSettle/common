/*

***********************************************************************************
* Copyright (C) 2018 - 2020, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package Blocksettle.Communication.headless;
import "Blocksettle_Communication_Internal.proto";

enum RequestType
{
   InvalidRequestType            = 0;
   AuthenticationRequestType     = 1;
   SignTxRequestType             = 2;
   SignPartialTXRequestType      = 3;
   SignAuthAddrRevokeType        = 4;
   SetSettlementIdType           = 5;
   CreateSettlWalletType         = 7;
   CreateHDLeafRequestType       = 8;
   GetRootKeyRequestType         = 10;
   AutoSignActType               = 11;
   GetHDWalletInfoRequestType    = 12;
   DisconnectionRequestType      = 13;
   CancelSignTxRequestType       = 15;
   SyncWalletInfoType            = 16;
   SyncHDWalletType              = 17;
   SyncWalletType                = 18;
   SyncCommentType               = 19;
   SyncAddressesType             = 20;
   ExecCustomDialogRequestType   = 21;
   WalletsListUpdatedType        = 22; // Sent from headless signer when wallet added, removed or changed somehow (request body is empty)
   ExtendAddressChainType        = 23;
   SyncNewAddressType            = 24;
   SignSettlementTxRequestType   = 25;
   SignSettlementPartialTxType   = 26;
   SignSettlementPayoutTxType    = 27;
   SyncCCNamesType               = 28;
   GetSettlPayinAddrType         = 29;
   SettlGetRootPubkeyType        = 30;
   UpdateDialogDataType          = 32; // update fields in password input dialogs in signer ui
   ChatNodeRequestType           = 34;
   UpdateStatusType              = 35; // sent to terminal with latest status update
   SettlementAuthType            = 36;
   SettlementCPType              = 37;
   WindowStatusType              = 38;
   ResolvePublicSpendersType     = 39;
   PromoteWalletToPrimaryType    = 40;
}

message RequestPacket
{
   uint32      id         = 1;
   bytes       authTicket = 2;
   RequestType type       = 3;
   bytes       data       = 4;
}

message ResponsePacket
{
   uint32      id   = 1;
   RequestType type = 2;
   bytes       data = 3;
}

service PacketService {
   rpc Packet (RequestPacket) returns (ResponsePacket);
}


enum NetworkType
{
   MainNetType = 0;
   TestNetType = 1;
}

message AuthenticationRequest
{
   NetworkType  netType = 1;
}

message AuthenticationReply
{
   oneof result {
      bytes authTicket = 1;
      string   error = 2;
   }
   NetworkType  netType = 3;
}

message Change
{
   string   address = 1;
   string   index = 2;
   uint64   value = 3;
}

message SupportingTransaction
{
   bytes hash = 1;
   bytes rawtx = 2;
}

message SignTxRequest
{
   repeated string                  walletId = 1;
   repeated bytes                   recipients = 3;
   uint64                           fee = 4;
   bool                             RBF = 5;
   bytes                            unsigned_state = 6;
   Change                           change = 7;
   bool                             keepDuplicatedRecipients = 11;
   bool                             allow_broadcasts = 21;
   uint64                           expired_timestamp_ms = 22;
   bytes                            tx_hash = 23;
}

message SignTxReply
{
   uint32         errorCode = 1;
   bytes          signedTX = 2;
   Change         change = 3;
}

message CancelSignTx
{
   bytes  tx_id       = 1;
}

message SignSettlementTxRequest
{
   SignTxRequest signTxRequest                                                 = 1;
   Blocksettle.Communication.Internal.PasswordDialogData passwordDialogData    = 2;
}

message SignSettlementPayoutTxRequest
{
   SignPayoutTXRequest signPayoutTXRequest                                     = 1;
   Blocksettle.Communication.Internal.PasswordDialogData passwordDialogData    = 2;
}

message SignPayoutTXRequest
{
   bytes signerState = 1;
   uint64   fee = 3;
   SettlementData settlement_data = 4;
   bytes tx_hash = 5;
}


message SignAuthAddrRevokeRequest
{
   string   wallet_id = 1;
   string   auth_address = 2;
   bytes    utxo = 3;
   string   validation_address = 4;
}

message CreateSettlWalletRequest
{
   string wallet_id = 1;
   string auth_address = 2;
   Blocksettle.Communication.Internal.PasswordDialogData passwordDialogData    = 3;
}

message CreateSettlWalletResponse
{
   string wallet_id = 1;
   bytes  public_key = 2;
}

message SetSettlementIdRequest
{
   string wallet_id = 1;
   bytes  settlement_id = 2;
}

message SetSettlementIdResponse
{
   string wallet_id = 1;
   bool   success = 2;
}

message SettlementData
{
   bytes  settlement_id = 1;
   bytes  counterparty_pubkey = 2;
   bool   my_pubkey_first = 3;
}

message SettlPayinAddressRequest
{
   string wallet_id = 1;
   SettlementData settlement_data = 2;
}

message SettlPayinAddressResponse
{
   string wallet_id = 1;
   bool   success = 2;
   string address = 3;
}

message SettlGetRootPubkeyRequest
{
   oneof request {
      string   wallet_id = 1;
      string   address = 2;
   }
}

message SettlGetRootPubkeyResponse
{
   string wallet_id = 1;
   bool   success = 2;
   bytes  public_key = 3;
}

enum AuthWalletResponseType
{
   AWR_NoError       = 0;
   AWR_NoPrimary     = 1;
   AWR_WrongSalt     = 2;
   AWR_NotDecrypted  = 3;
   AWR_SaltSetFailed = 4;
   AWR_UnsetSalt     = 5;
}

message CreateHDLeafRequest
{
   string   rootWalletId = 1;
   string   path = 2;
   Blocksettle.Communication.Internal.PasswordDialogData passwordDialogData = 3;
   bytes    salt = 4;
}

message HDLeafWO
{
   string   name = 1;
   string   desc = 2;
   string   walletId = 3;
   string   path = 4;
   bool     extOnly = 5;
}

message HDGroupWO
{
   string   path = 1;
}

message HDWalletWO
{
   string walletId = 1;
   string name     = 2;
   string description = 3;
   bool     testnet = 4;
   repeated HDGroupWO groups = 5;
   repeated HDLeafWO  leaves = 6;
}

message CreateHDLeafResponse
{
   uint32    errorCode   = 1;
   HDLeafWO  leaf        = 2;
}

message PromoteWalletToPrimaryRequest
{
   string      rootWalletId = 1;
   Blocksettle.Communication.Internal.PasswordDialogData passwordDialogData = 2;
}

message PromoteWalletToPrimaryResponse
{
   uint32    errorCode   = 1;
   string    rootWalletId = 2;
}

message DeleteHDWalletRequest
{
   oneof delete {
      string   rootWalletId = 1;
      string   leafWalletId = 2;
   }
}

message DeleteHDWalletResponse
{
   bool     success = 1;
   string   error = 2;
}


message AutoSignActEvent
{
   uint32   errorCode = 1;
   string   rootWalletId = 2;
}


message GetHDWalletInfoRequest
{
   string   rootWalletId = 1;
}

message GetHDWalletInfoResponse
{
   repeated uint32 encTypes = 1;
   repeated bytes encKeys = 2;
   uint32	rankM = 3;
   uint32	rankN = 4;
   string       error = 5;
   string       rootWalletId = 6;
}

enum WalletFormat
{
   WalletFormatUnknown    = 0;
   WalletFormatHD         = 1;
   WalletFormatPlain      = 2;
   WalletFormatSettlement = 3;
}

message SyncWalletInfoResponse
{
   message WalletKeyRank {
      uint32 m = 1;
      uint32 n = 2;
   }
   message WalletInfo {
      WalletFormat format = 1;
      string id = 2;
      string name = 3;
      string description = 4;
      NetworkType netType = 5;
      bool watching_only = 6;

      repeated EncryptionType encryptionTypes = 7;
      repeated bytes encryptionKeys = 8;
      WalletKeyRank keyRank = 9;
   }
   repeated WalletInfo wallets = 1;
}


message SyncWalletRequest
{
   string walletId = 1;
}

message SyncHDWalletResponse
{
   message Leaf {
      string id = 1;
      string path = 2;
      bytes  extra_data = 3;
   }
   message Group {
      uint32 type = 1;
      repeated Leaf leaves = 2;
      bool   ext_only = 3;
      bytes  salt = 4;
   }

   string walletId = 1;
   repeated Group groups = 2;
}

enum EncryptionType
{
   EncryptionTypeUnencrypted = 0;
   EncryptionTypePassword    = 1;
   EncryptionTypeAutheID     = 2;
   EncryptionTypeHw          = 3;
}

message SyncWalletResponse
{
   message Address {
      string index = 1;
      string address = 2;
      string comment = 3;
   }
   message TxComment {
      bytes  txHash = 1;
      string comment = 2;
   }

   string walletId = 1;
   uint32 highest_ext_index = 2;
   uint32 highest_int_index = 3;

   repeated Address   addresses = 4;
   repeated Address   addrPool = 5;
   repeated TxComment txComments = 6;
}

message SyncCommentRequest
{
   string walletId = 1;
   oneof key {
      string address = 2;
      bytes  txHash = 3;
   }
   string comment = 4;
}

message SettlementAuthAddress
{
   string wallet_id = 1;
   bytes  settlement_id = 2;
   string auth_address = 3;
}

message SettlementCounterparty
{
   string wallet_id = 1;
   bytes  payin_hash = 2;
   bytes  settlement_id = 3;
   bytes  cp_public_key = 4;
}

enum SyncState
{
   SyncState_Success = 0;
   SyncState_NothingToDo = 1;
   SyncState_Failure = 2;
}

message SyncAddressesRequest
{
   string wallet_id = 1;
   repeated bytes addresses = 2;
}

message SyncAddressesResponse
{
   string wallet_id = 1;
   SyncState state = 2;
}

message ExtendAddressChainRequest
{
   string wallet_id = 1;
   uint32 count = 2;
   bool   ext_int = 3;
}

message ExtendAddressChainResponse
{
   message AddressPair {
      string address = 1;
      string index = 2;
   }
   string wallet_id = 1;
   repeated AddressPair addresses = 2;
}

message CustomDialogRequest
{
   string dialogName = 1;
   bytes  variantData = 2;
}


message SyncNewAddressRequest
{
   message Address {
      string index = 1;
      uint32 aet = 2;
   }
   string wallet_id = 1;
   repeated Address addresses = 2;

}


message SyncCCNamesData
{
   repeated string ccNames = 1;
}

message UpdateDialogDataRequest
{
   uint32                                                dialogId              = 1;
   Blocksettle.Communication.Internal.PasswordDialogData passwordDialogData    = 2;
}

message UpdateStatus
{
   enum WalletsStatus
   {
      Unknown = 0;

      // Need to show create wallet prompt
      NoWallets = 1;

      // Wallets ready to sync
      ReadyToSync = 2;
   }

   WalletsStatus status = 1;
}

message ChatNodeRequest
{
   string wallet_id = 1;
}

message ChatNodeResponse
{
   string wallet_id = 1;
   string b58_chat_node = 2;
}

message InputSigs
{
   message InputSig {
      uint32 index = 1;
      bytes  data = 2;
   }
   repeated InputSig inputSig = 1;
}

message WindowStatus
{
   bool visible = 1;

}
