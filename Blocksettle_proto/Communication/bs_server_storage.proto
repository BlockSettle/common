syntax = "proto3";

package Blocksettle.Server.Storage;

import "trade_history.proto";


message StorageCCDefinition
{
   string   cc_name  = 1;
   int32    lot_size = 2;
   bool     enabled  = 3;
}

message StorageCCUtxoMessage
{
   string settlement_id = 1;
   bytes  tx_hash = 2;
   uint32 index = 3;
   string cc = 4;
   uint64 amount = 5;
   string user = 6;
   string address = 7;
   int32  status = 8;
}


enum StorageType
{
   StorageUnknown       = 0;
   StorageCC            = 1;
   StorageAddresses     = 2;
   StorageRequests      = 3;
   StorageCCDefinitions = 4;
   StorageTradeHist     = 5;
}


enum StorageCCDomain
{
   StorageCCUnknown = 0;
   StorageCcUtxo = 1;
}


enum StorageMessageType
{
   StorageUnknownType = 0;
   StorageGet         = 1;
   StoragePut         = 2;
   StorageDelete      = 3;
   StorageDataAvail   = 4;
}

message StorageAddressUserMessage
{
   string email = 1;
   bytes  user_id = 2;
   string full_name = 3;
}

message StorageAddressAuthRequest
{
   string address = 1;
}

message StorageAddressAuthResponse
{
   string address = 1;
   string username = 2;
   int32  status = 3;
}

enum StorageAddressDomain
{
   StorageAddressUnknown = 0;
   StorageAddressUser = 1;
   StorageAddressAuth = 2;
}

message SaveNewRequest
{
   RequestFileType   type           = 1;
   bytes             data           = 2;
}

message ExportRequestFiles
{
   string export_path = 1;
}

message ExportRequestFilesResponse
{
   bool     export_result  = 1;
   int32    requests_count = 2;
   string   export_path    = 3;
}

message RequestCompletedUpdate
{
   string request_id = 1;
}

message StorageAddressMessage
{
  StorageAddressDomain domain = 1;
   oneof data {
      StorageAddressUserMessage user = 2;
      StorageAddressAuthRequest  auth_request = 3;
      StorageAddressAuthResponse auth_response = 4;
   }
}

enum RequestStorageMessageType
{
   SaveNewRequestFileType     = 0;

   ExportRequestsType         = 1;
   ExportRequestsResponseType = 2;

   RequestCompletedType       = 3;
   PendingRequestsStatistics  = 4;

}

enum RequestFileType
{
   SubmitAuthAddressRequestFileType       = 0;
   RevokeAuthAddressRequestFileType       = 1;
   GenerateCCSeedRequestFileType          = 2;
   CCInitialDistributionRequestFileType   = 3;
   FundCCGenAddressRequestFileType        = 4;

   RequestFileTypeSize                    = 5;
}


message StorageCCMessage
{
  StorageCCDomain domain = 1;
   oneof data {
      StorageCCUtxoMessage utxo = 2;
      StorageCCUtxoBatch   utxo_batch = 3;
   }
}

message StorageCCUtxoBatch
{
   string settlement_id = 1;
   repeated StorageCCUtxoMessage utxos = 2;
}

message StorageCCDefinitionsMessage
{
   CCDefinitionsMessageType type = 1;

   oneof data {
      CCDefinitionsSnapshotMessage  cc_snapshot          = 2;
      StorageCCDefinition           create_definition    = 3;
      StorageCCDefinition           disable_definition   = 4;
      StorageCCDefinitionResponse   response             = 5;
   }
}

enum CCDefinitionsMessageType
{
   CCDefinitionsSnapshot      = 0;
   CreateCCDefinitionRequest  = 1;
   DisbleCCDefinitionRequest  = 2;
   CCDefinitionsResponse      = 3;
}

message CCDefinitionsSnapshotMessage
{
   int32                         revision    = 1;
   repeated StorageCCDefinition  definitions = 2;
}

message StorageCCDefinitionResponse
{
   bool     result         = 1;
   string   debug_message  = 2;
}

message StorageRequestsMessage
{
   RequestStorageMessageType  type = 1;
   bytes                      associated_data = 2;
   oneof data {
      SaveNewRequest             request           = 3;
      ExportRequestFiles         export_request    = 4;
      ExportRequestFilesResponse export_response   = 5;
      RequestCompletedUpdate     completed_request = 6;
      PendingRequestsInfo        pending_requests_statistics = 7;
   }
}

message PendingRequestsInfo
{
   int32 submit_auth_address     = 1;
   int32 revoke_auth_address     = 2;
   int32 generate_cc_seed        = 3;
   int32 cc_initial_distribution = 4;
   int32 fund_cc_gen_address     = 5;
}


message StorageTradeHistBuySellTrades
{
   string product = 1;
   bytes  buy_trade = 2;
   bytes  sell_trade = 3;
}

message StorageTradeHistTrades
{
   string product = 1;
   uint64 time_from = 2;
   uint64 time_to = 3;
   repeated bytes trades = 4;
}

message StorageTradeHistCCPrices
{
   string product = 1;
   bool   is_set = 2;
   double bid_price = 3;
   double offer_price = 4;
}

message StorageTradeHistSnapshots
{
   repeated Snapshot snapshots = 1;
   Communication.TradeHistory.DateContainer original_date = 2;

   message Snapshot {
      bytes  snapshot = 1;
      Communication.TradeHistory.DateContainer date = 2;
   }
}

message StorageTradeHistMessage
{
   oneof data {
       bytes  fx_trade = 1;
       bytes  xbt_trade = 2;
       bytes  cc_trade = 3;
       bytes  trade_info = 4;	// used as a put response
       string fx_trade_request = 5;
       string xbt_trade_request = 6;
       string cc_trade_request = 7;
       StorageTradeHistBuySellTrades fx_buysell_trade = 8;
       StorageTradeHistBuySellTrades xbt_buysell_trade = 9;
       StorageTradeHistBuySellTrades cc_buysell_trade = 10;
       StorageTradeHistTrades fx_trades = 11;
       StorageTradeHistTrades xbt_trades = 12;
       StorageTradeHistTrades cc_trades = 13;
       string cc_prices_request = 14;
       StorageTradeHistCCPrices cc_prices_response = 15;
       Communication.TradeHistory.DateContainer eod_snapshot_request = 16;
       bytes  eod_snapshot_response = 17;
       Communication.TradeHistory.DateContainer eod_snapshots_request = 18;
       StorageTradeHistSnapshots eod_snapshots_response = 19;
   }
}


message StorageMessage
{
   StorageMessageType type = 1;
   StorageType domain = 2;
   oneof data {
      StorageAddressMessage         address        = 3;
      StorageCCMessage              cc             = 4;
      StorageRequestsMessage        requests       = 5;
      StorageCCDefinitionsMessage   cc_definitions = 6;
      StorageTradeHistMessage       trade_hist     = 7;
   }
}
