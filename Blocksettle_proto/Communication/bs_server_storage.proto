syntax = "proto3";

package Blocksettle.Server.Storage;

message StorageCCDefinition
{
   string   cc_name  = 1;
   int32    lot_size = 2;
   bool     enabled  = 3;
}

message StorageCCUtxoMessage
{
   string settlement_id = 1;
   bytes  tx_hash = 2;
   uint32 index = 3;
   string cc = 4;
   uint64 amount = 5;
   string user = 6;
   string address = 7;
   int32  status = 8;
}


enum StorageType
{
   StorageUnknown             = 0;
   StorageCC                  = 1;
   StorageAddresses           = 2;
   StorageRequests            = 3;
   StorageCCDefinitions       = 4;
   StorageAuthAddressSubmit   = 5;
}


enum StorageCCDomain
{
   StorageCCUnknown = 0;
   StorageCcUtxo = 1;
}


enum StorageMessageType
{
   StorageUnknownType = 0;
   StorageGet         = 1;
   StoragePut         = 2;
   StorageDelete      = 3;
   StorageDataAvail   = 4;
}

message StorageAddressAuthRequest
{
   string address = 1;
}

message StorageAddressAuthResponse
{
   enum AuthAddressStatus
   {
      AuthAddressFunded       = 0;
      AuthAddressRevoked      = 1;
      AuthAddressBlacklisted  = 2;
      AuthAddressUnknown      = 3;
   }

   string            address  = 1;
   string            username = 2;
   AuthAddressStatus status   = 3;
}

message SaveNewRequest
{
   RequestFileType   type           = 1;
   bytes             data           = 2;
}

message ExportRequestFiles
{
   string export_path = 1;
}

message ExportRequestFilesResponse
{
   bool     export_result  = 1;
   int32    requests_count = 2;
   string   export_path    = 3;
}

message RequestCompletedUpdate
{
   string request_id = 1;
}

message StorageAddressMessage
{
   enum StorageAddressDomain
   {
      StorageAddressUnknown = 0;
      StorageAddressAuth = 1;
   }

   StorageAddressDomain domain = 1;

   oneof data {
      StorageAddressAuthRequest  auth_request = 2;
      StorageAddressAuthResponse auth_response = 3;
   }
}

enum RequestStorageMessageType
{
   SaveNewRequestFileType     = 0;

   ExportRequestsType         = 1;
   ExportRequestsResponseType = 2;

   RequestCompletedType       = 3;
   PendingRequestsStatistics  = 4;

}

enum RequestFileType
{
   SubmitAuthAddressRequestFileType       = 0;
   RevokeAuthAddressRequestFileType       = 1;
   GenerateCCSeedRequestFileType          = 2;
   CCInitialDistributionRequestFileType   = 3;
   FundCCGenAddressRequestFileType        = 4;

   RequestFileTypeSize                    = 5;
}


message StorageCCMessage
{
  StorageCCDomain domain = 1;
   oneof data {
      StorageCCUtxoMessage utxo = 2;
      StorageCCUtxoBatch   utxo_batch = 3;
   }
}

message StorageCCUtxoBatch
{
   string settlement_id = 1;
   repeated StorageCCUtxoMessage utxos = 2;
}

message StorageCCDefinitionsMessage
{
   CCDefinitionsMessageType type = 1;

   oneof data {
      CCDefinitionsSnapshotMessage  cc_snapshot          = 2;
      StorageCCDefinition           create_definition    = 3;
      StorageCCDefinition           disable_definition   = 4;
      StorageCCDefinitionResponse   response             = 5;
   }
}

enum CCDefinitionsMessageType
{
   CCDefinitionsSnapshot      = 0;
   CreateCCDefinitionRequest  = 1;
   DisbleCCDefinitionRequest  = 2;
   CCDefinitionsResponse      = 3;
}

message CCDefinitionsSnapshotMessage
{
   int32                         revision    = 1;
   repeated StorageCCDefinition  definitions = 2;
}

message StorageCCDefinitionResponse
{
   bool     result         = 1;
   string   debug_message  = 2;
}

message StorageRequestsMessage
{
   RequestStorageMessageType  type = 1;
   bytes                      associated_data = 2;
   oneof data {
      SaveNewRequest             request           = 3;
      ExportRequestFiles         export_request    = 4;
      ExportRequestFilesResponse export_response   = 5;
      RequestCompletedUpdate     completed_request = 6;
      PendingRequestsInfo        pending_requests_statistics = 7;
   }
}

message PendingRequestsInfo
{
   int32 submit_auth_address     = 1;
   int32 revoke_auth_address     = 2;
   int32 generate_cc_seed        = 3;
   int32 cc_initial_distribution = 4;
   int32 fund_cc_gen_address     = 5;
}

message AuthAddressSubmit
{
   // Keep in sync with AddressStorage::ReservationState
   enum ReservationState
   {
      UNDEFINED = 0;
      PENDING_APPROVAL = 1;
      RESERVED = 2;
      REJECTED = 4;
      CONFIRMED = 5;
   };

   message AuthFeeReservationInfo
   {
      string username = 1;
      uint64 xbt_amount = 2;
      float eur_amount = 3;
      ReservationState state = 4;
   }

   message SaveAuthResRequest
   {
      string address = 1;
      AuthFeeReservationInfo info = 2;
   }

   message SaveAuthResResponse
   {
      bool success = 1;
      AuthFeeReservationInfo info = 2;
   }

   message GetAuthResRequest
   {
      string address = 1;
   }

   message GetAuthResResponse
   {
      bool success = 1;
      AuthFeeReservationInfo info = 2;
   }

   message UpdateAuthResRequest
   {
      string address = 1;
      ReservationState state = 2;
   }

   message UpdateAuthResResponse
   {
      bool success = 1;
   }

   oneof data {
      SaveAuthResRequest save_auth_res_request = 5;
      SaveAuthResResponse save_auth_res_response = 6;
      GetAuthResRequest get_auth_res_request = 7;
      GetAuthResResponse get_auth_res_response = 8;
      UpdateAuthResRequest update_auth_res_request = 9;
      UpdateAuthResResponse update_auth_res_resonse = 10;
   }
}

message StorageMessage
{
   StorageMessageType type = 1;
   StorageType domain = 2;
   oneof data {
      StorageAddressMessage         address              = 3;
      StorageCCMessage              cc                   = 4;
      StorageRequestsMessage        requests             = 5;
      StorageCCDefinitionsMessage   cc_definitions       = 6;
      AuthAddressSubmit             auth_address_submit  = 7;
   }
}
