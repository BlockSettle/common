syntax = "proto3";

package Blocksettle.Server.Storage;

import "trade_history.proto";

message Empty
{
}

message StorageCCDefinition
{
   string   cc_name  = 1;
   int32    lot_size = 2;
   bool     enabled  = 3;
}

message StorageCCUtxoMessage
{
   string settlement_id = 1;
   bytes  tx_hash = 2;
   uint32 index = 3;
   string cc = 4;
   uint64 amount = 5;
   string user = 6;
   string address = 7;
   int32  status = 8;
}

enum StorageType
{
   StorageUnknown       = 0;
   StorageCC            = 1;
   StorageAddresses     = 2;
   StorageRequests      = 3;
   StorageCCDefinitions = 4;
   StorageTradeHist     = 5;
   StorageUserScore     = 6;
}


enum StorageCCDomain
{
   StorageCCUnknown = 0;
   StorageCcUtxo = 1;
}


enum StorageMessageType
{
   StorageUnknownType = 0;
   StorageGet         = 1;
   StoragePut         = 2;
   StorageDelete      = 3;
   StorageDataAvail   = 4;
}

message StorageAuthReservation
{
   enum AuthReservationState
   {
      AuthReservationUndefined         = 0;
      AuthReservationPendingApproval   = 1;
      AuthReservationReserved          = 2;
      AuthReservationRejected          = 3;
      AuthReservationConfirmed         = 4;
   }

   string               address     = 1;
   string               user        = 2;
   uint64               xbt_amount  = 3;
   double               eur_amount  = 4;
   AuthReservationState state       = 5;
}

message StorageAuthAddressState
{
   enum AuthAddressStatus
   {
      AuthAddressFunded       = 0;
      AuthAddressRevoked      = 1;
      AuthAddressBlacklisted  = 2;
      AuthAddressUnknown      = 3;
   }

   string            address  = 1;
   string            user     = 2;
   AuthAddressStatus status   = 3;
}

message StorageAuthReservationResponse
{
   bool                    result            = 1;
   string                  error_message     = 2;
   StorageAuthReservation  reservation_info  = 3;
}

message StorageAuthAddressStateResponse
{
   bool     result         = 1;
   string   error_message  = 2;
}

message StorageAddressMessage
{
   enum StorageAddressDomain
   {
      StorageAddressReservationDefinition    = 0;
      StorageAddressReservationUpdateState   = 1;
      StorageAddressAuthStatus               = 2;
   }

   StorageAddressDomain domain = 1;

   oneof data {
      StorageAuthReservation           auth_reservation        = 2;
      StorageAuthReservationResponse   put_reservation_result  = 3;
      StorageAuthAddressState          auth_address            = 4;
      StorageAuthAddressStateResponse  pub_auth_address_result = 5;
   }
}

message SaveNewRequest
{
   RequestFileType   type           = 1;
   bytes             data           = 2;
   // Optional key to drop duplicated requests
   string            ext_request_id = 3;
}

message SaveNewResponse
{
   bool success = 1;
}

message CcToken
{
   string email = 1;
   string cc_product = 2;
   uint32 bs_seed = 3;
}

enum CcTokenStatus
{
   CC_TOKEN_STATUS_FAILED = 0;
   CC_TOKEN_STATUS_NOT_FOUND = 1;
   CC_TOKEN_STATUS_FOUND = 2;
   CC_TOKEN_STATUS_COMPLETE= 3;
}

message ExportRequestFiles
{
   string export_path = 1;
}

message ExportRequestFilesResponse
{
   bool     export_result  = 1;
   int32    requests_count = 2;
   string   export_path    = 3;
}

message RequestCompletedUpdate
{
   string request_id = 1;
}

enum RequestStorageMessageType
{
   UnknownRequestType             = 0;

   SaveRequestFileType            = 1;
   SaveRequestFileResponseType    = 2;

   ExportRequestsType             = 3;
   ExportRequestsResponseType     = 4;

   RequestCompletedType           = 5;
   PendingRequestsStatistics      = 6;

   AddCcTokenRequest              = 7;
   AddCcTokenResponse             = 8;
   VerifyCcTokenRequest           = 9;
   VerifyCcTokenResponse          = 10;
   CompleteCcTokenRequest         = 11;
   CompleteCcTokenResponse        = 12;
}

enum RequestFileType
{
   SubmitAuthAddressRequestFileType       = 0;
   RevokeAuthAddressRequestFileType       = 1;
   GenerateCCSeedRequestFileType          = 2;
   CCInitialDistributionRequestFileType   = 3;
   FundCCGenAddressRequestFileType        = 4;

   RequestFileTypeSize                    = 5;
}


message StorageCCMessage
{
  StorageCCDomain domain = 1;
   oneof data {
      StorageCCUtxoMessage utxo = 2;
      StorageCCUtxoBatch   utxo_batch = 3;
   }
}

message StorageCCUtxoBatch
{
   string settlement_id = 1;
   repeated StorageCCUtxoMessage utxos = 2;
}

message StorageCCDefinitionsMessage
{
   CCDefinitionsMessageType type = 1;

   oneof data {
      CCDefinitionsSnapshotMessage  cc_snapshot          = 2;
      StorageCCDefinition           create_definition    = 3;
      StorageCCDefinition           disable_definition   = 4;
      StorageCCDefinitionResponse   response             = 5;
   }
}

enum CCDefinitionsMessageType
{
   CCDefinitionsSnapshot      = 0;
   CreateCCDefinitionRequest  = 1;
   DisbleCCDefinitionRequest  = 2;
   CCDefinitionsResponse      = 3;
}

message CCDefinitionsSnapshotMessage
{
   int32                         revision    = 1;
   repeated StorageCCDefinition  definitions = 2;
}

message StorageCCDefinitionResponse
{
   bool     result         = 1;
   string   debug_message  = 2;
}

message StorageRequestsMessage
{
   RequestStorageMessageType  type = 1;
   bytes                      associated_data = 2;
   oneof data {
      SaveNewRequest             save_request      = 3;
      SaveNewResponse            save_response     = 8;
      ExportRequestFiles         export_request    = 4;
      ExportRequestFilesResponse export_response   = 5;
      RequestCompletedUpdate     completed_request = 6;
      PendingRequestsInfo        pending_requests_statistics = 7;
      CcToken                    add_cc_token_request          = 9;
      bool                       add_cc_token_response         = 10;
      CcToken                    verify_cc_token_request       = 11;
      CcTokenStatus              verify_cc_token_response      = 12;
      CcToken                    complete_cc_token_request     = 13;
      bool                       complete_cc_token_response    = 14;
   }
}

message PendingRequestsInfo
{
   int32 submit_auth_address     = 1;
   int32 revoke_auth_address     = 2;
   int32 generate_cc_seed        = 3;
   int32 cc_initial_distribution = 4;
   int32 fund_cc_gen_address     = 5;
}


message StorageTradeHistBuySellTrades
{
   string product = 1;
   bytes  buy_trade = 2;
   bytes  sell_trade = 3;
}

message StorageTradeHistTrades
{
   string product = 1;
   uint64 time_from = 2;
   uint64 time_to = 3;
   repeated bytes trades = 4;
}

message StorageTradeHistCCPrices
{
   string product = 1;
   bool   is_set = 2;
   double bid_price = 3;
   double offer_price = 4;
}

message StorageTradeHistSnapshots
{
   repeated Snapshot snapshots = 1;
   Communication.TradeHistory.DateContainer original_date = 2;

   message Snapshot {
      bytes  snapshot = 1;
      Communication.TradeHistory.DateContainer date = 2;
   }
}

message GetLatestEODDate
{
   bool                                      loaded         = 1;
   Communication.TradeHistory.DateContainer  last_eod_date  = 2;
}

message SaveEODSnapshotResponse
{
   bool                                      saved    = 1;
   bytes                                     snapshot = 2;
   Communication.TradeHistory.DateContainer  date     = 3;
}

message CreateCcDefinition
{
   string cc_name = 1;
   bool is_set = 2;
}

message StorageTradeHistMessage
{
   oneof data {
      bytes                                     fx_trade                = 1;
      bytes                                     xbt_trade               = 2;
      bytes                                     cc_trade                = 3;
      bytes                                     trade_info              = 4;	// used as a put response
      string                                    fx_trade_request        = 5;
      string                                    xbt_trade_request       = 6;
      string                                    cc_trade_request        = 7;
      StorageTradeHistBuySellTrades             fx_buysell_trade        = 8;
      StorageTradeHistBuySellTrades             xbt_buysell_trade       = 9;
      StorageTradeHistBuySellTrades             cc_buysell_trade        = 10;
      StorageTradeHistTrades                    fx_trades               = 11;
      StorageTradeHistTrades                    xbt_trades              = 12;
      StorageTradeHistTrades                    cc_trades               = 13;
      string                                    cc_prices_request       = 14;
      StorageTradeHistCCPrices                  cc_prices_response      = 15;
      StorageTradeHistCCPrices                  set_cc_prices_request   = 16;
      Communication.TradeHistory.DateContainer  eod_snapshot_request    = 17;
      bytes                                     eod_snapshot_response   = 18;
      Communication.TradeHistory.DateContainer  eod_snapshots_request   = 19;
      StorageTradeHistSnapshots                 eod_snapshots_response  = 20;
      GetLatestEODDate                          last_eod_date           = 21;
      StorageTradeHistSnapshots                 save_eod_snapshot       = 22;
      SaveEODSnapshotResponse                   save_eod_result         = 23;
      Empty                                     last_eur_price_request  = 24;
      double                                    last_eur_price_response = 25;
      CreateCcDefinition                        create_cc_definition    = 26;
   }
}

message UserScoreUpdateEvent
{
   enum ScoreUpdateEventType
   {
      UnsignedPayinSentBeforeRequested = 0;
      DuplicateUnsignedPayinDelivery   = 1;
      UnsignedPayinFromUnexpectedUser  = 2;

      SignedPayoutSentToAMissingTrade  = 3;
      SignedPayoutSentBeforeRequested  = 4;
      DuplicateSignedPayoutDelivery    = 5;
      SignedPayoutFromUnexpectedUser   = 6;

      SignedPayinSentToAMissingTrade   = 7;
      SignedPayinSentBeforeRequested   = 8;
      DuplicateSignedPayinDelivery     = 9;
      SignedPayinFromUnexpectedUser    = 10;

      PayinPushMempoolConflict         = 11;
      PayoutPushMempoolConflict        = 12;

      InvalidAuthAddressUsed           = 13;
      SignedPayinTimeout               = 14;

      ReservedUTXOUsed                 = 15;

      UserBanFromCLI                   = 16;
      ResetUserScoreFromCLI            = 17;

      SignedPayoutTimeout              = 18;
   };

   string               user_email     = 1;
   ScoreUpdateEventType reason         = 2;
   string               settlement_id  = 3;
}

message UserScoreRequest
{
   string               user_email  = 1;
}

message UserScoreData
{
   string               user_email  = 1;
   uint64               score       = 2;
   bool                 loaded      = 3;
}

message StorageUserScoreMessage
{
   oneof data {
      UserScoreUpdateEvent update_score_request    = 1;
      UserScoreRequest     ban_user_request        = 2;
      UserScoreRequest     reset_score_request     = 3;
      UserScoreRequest     load_score_request      = 4;
      UserScoreData        update_score_response   = 5;
      UserScoreData        load_score_response     = 6;
   }
}

message StorageMessage
{
   StorageMessageType   type     = 1;
   StorageType          domain   = 2;
   oneof data {
      StorageAddressMessage         address        = 3;
      StorageCCMessage              cc             = 4;
      StorageRequestsMessage        requests       = 5;
      StorageCCDefinitionsMessage   cc_definitions = 6;
      StorageTradeHistMessage       trade_hist     = 7;
      StorageUserScoreMessage       user_score     = 8;
   }
}
