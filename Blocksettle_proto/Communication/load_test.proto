syntax = "proto2";

package Blocksettle.Communication.load_test;

enum AdminCommandCode
{
   StartConnectCode           = 1;
   StartCustomerTradingCode   = 2;
   StopCustomerTradingCode    = 3;
   GetXBTFundingAddressCode   = 4;
   // no command data
   GetXBTWalletInfoCode       = 5;
   CreateTXCode               = 6;
   // no command data
   StopTXSendingCode          = 7;
   RevokeAllCoinsCode         = 8;
}

message AdminCommandHeader
{
   required AdminCommandCode  command_code = 1;
   optional string            command_data = 2;
}

message AdminCommandConnect
{
   required bool     connect_to_armory = 1;
   required bool     connect_to_celer = 2;
   required string   celer_host = 3;
   required string   celer_port = 4;
   required string   pub_host = 5;
   required string   pub_port = 6;
   required string   wallets_root = 7;
   required string   armory_host = 8;
   required string   armory_port = 9;
   required string   md_host = 10;
   required string   md_port = 11;
   required string   auth_server_host = 12;
   required string   auth_server_port = 13;
   required string   auth_server_public_key = 14;
   required bool     need_auth_address = 15;
}

message RFQAmount
{
   required string ccy = 1;
   required double amount = 2;
}

message RFQAmountsCollection
{
   repeated string      security_list = 1;
   repeated RFQAmount   amounts = 2;
}

message DealingPrice
{
   required string security = 1;
   required double base_price = 2;
}

message AdminCommandStartTrading
{
   required uint64               rfq_send_timeout = 1;

   required RFQAmountsCollection fx_rfq_amounts = 2;
   repeated DealingPrice         fx_dealing_prices = 3;

   optional RFQAmountsCollection xbt_rfq_amounts = 4;
   repeated DealingPrice         xbt_dealing_prices = 5;
}

message AdminCommandCreateTX
{
   required bool     send_all = 1;
   optional double   total_spend_amount = 2;

   required uint64   outputs_count = 4;
   required bool     create_new = 5;
   // if not random or new - least used address will be used as outputs
   required bool     use_random = 6;

   optional uint64   max_tx_size_bytes = 7;

   required bool     allow_zc_inputs = 8;

   required bool     repeat_tx = 9;
   optional uint64   repeat_tx_interval = 10;
}

message AdminCommandRevokeAllCoins
{
   required string revoke_to_address = 1;
}

enum CustomerUpdateType
{
   AppReadyStatus             = 1;
   CelerStatusUpdateType      = 2;
   ArmoryStatusUpdateType     = 3;
   BalanceUpdateType          = 4;
   RFQSentUpdateType          = 5;
   RFQReceivedUpdateType      = 6;
   RFQCancelledUpdateType     = 7;
   ReceivedQuoteUpdateType    = 8;
   AcceptedQuoteUpdateType    = 9;
   TradingStoppedUpdateType   = 10;
   XBTBalanceUpdateType       = 11;
   ErrorNotificationType      = 12;
   XBTAddressType             = 13;
   AuthAddressStateType       = 15;
   XBTWalletInfoType          = 16;
   TXBroadcastedType          = 17;
   // ZCReceivedNotificationType - no message body
   ZCReceivedNotificationType = 18;
}

enum RFQProductGroup
{
   SpotFXGroupType = 1;
   SpotXBTGroupType = 2;
   SpotPMGroupType = 3;
   UndefinedGroupType = 4;
}

message CustomerUpdateHeader
{
   required CustomerUpdateType   update_type = 1;
   required string               customer_email = 2;
   optional string               update_data = 3;
}

message CelerStatusUpdate
{
   required bool     connected = 1;
   optional uint64   login_timestamp = 2;
   optional uint64   login_time = 3;
}

message ArmoryStatusUpdate
{
   required bool connected = 1;
}

message BalanceUpdate
{
   required string ccy = 1;
   required double amount = 2;
}

message RFQSentUpdate
{
   required string            rfq_id = 1;
   required RFQProductGroup   group_type = 2;
   required uint64            timestamp = 3;
}

message RFQReceivedUpdate
{
   required string            rfq_id = 1;
   required RFQProductGroup   group_type = 2;
   required uint64            timestamp = 3;
   required uint64            celer_timestamp = 4;
}

message RFQCancelledUpdate
{
   required string            rfq_id = 1;
   required RFQProductGroup   group_type = 2;
   required uint64            timestamp = 3;
}

message ReceivedQuoteUpdate
{
   required string rfq_id              = 1;
   required string quote_id            = 2;
   required bool   tradeable           = 3;
   required RFQProductGroup group_type = 4;
   required uint64 timestamp           = 5;
   required uint64 celer_timestamp     = 6;
}

message AcceptedQuoteUpdate
{
   required string rfq_id     = 1;
   required string quote_id   = 2;
   required RFQProductGroup group_type = 3;
   required uint64 timestamp  = 4;
}

message XBTBalanceUpdate
{
   required double total_xbt_balance = 1;
   required double unconfirmed_xbt_balance = 2;
   required double spendable_xbt_balance = 3;
   required uint64 used_address_count = 4;
}

message ErrorNotification
{
   required string message = 1;
}

message XBTAddress
{
   required string   xbt_address = 1;
   required bool     dealing_customer = 2;
}

enum OTPStatus
{
   NoOTP = 1;
   OTPImported = 2;
   OTPOutdated = 3;
}

message OTPUpdateMessage
{
   required OTPStatus   otp_status = 1;
   required uint64      usage_count = 2;
}

message AuthAddressUpdate
{
   required string   auth_address = 1;
   required string   address_state_string = 2;
}

message AddressInfo
{
   required string   address = 1;
   required uint32   tx_count = 2;
}

message XBTWalletInfo
{
   repeated AddressInfo address_info = 1;
}

message TXBroadcasted
{
   required uint64   used_inputs = 1;
   required uint64   outputs_count = 2;
   required uint64   tx_amount = 3;
   required uint64   fee_amount = 4;
   required uint64   tx_size = 5;
}