/*

***********************************************************************************
* Copyright (C) 2018 - 2020, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

// Messages common between systems (e.g. terminal and PB)
package BlockSettle.Common;


message Empty {}

message NewKeyCompare
{
   bytes  old_key = 1;
   bytes  new_key = 2;
   string server_id = 3;
}


message ArmoryMessage
{
   message Loading
   {
      int32 network_type = 1;
   }

   message Settings
   {
      int32  socket_type = 1;
      int32  network_type = 2;
      string host = 3;
      string port = 4;
      string bip15x_key = 5;
      bool   run_locally = 6;
      string data_dir = 7;
      string executable_path = 8;
      string bitcoin_dir = 9;
      string db_dir = 10;
      string cache_file_name = 11;
   }

   message State
   {
      int32  state = 1;
      uint32 top_block = 2;
   }

   message RegisterWallet
   {
      string wallet_id = 1;
      bool   as_new = 2;
      repeated bytes addresses = 3;
   }

   message WalletRegistered
   {
      string wallet_id = 1;
      bool   success = 2;
   }

   message Refresh
   {
      repeated string ids = 1;
      bool online = 2;
   }

   message NewBlock
   {
      uint32 top_block = 1;
      uint32 branch_height = 2;
   }

   message ZCInvalidated
   {
      repeated bytes tx_hashes = 1;
   }

   message TXEntry
   {
      bytes  tx_hash = 1;
      repeated string wallets_id = 2;
      int64  value = 3;
      uint32 block_num = 4;
      uint32 tx_time = 5;
      bool   RBF = 6;
      bool   chained = 7;
      repeated string addresses = 8;
   }

   message ZCReceived
   {
      string request_id = 1;
      repeated TXEntry tx_entries = 2;
   }

   message TXPushData
   {
      bytes expected_tx_hash = 1;
      bytes tx = 2;
   }

   message TXPushRequest
   {
      repeated TXPushData txs_to_push = 1;
      string push_id = 2;	// optional
   }

   enum PushTxResult
   {
      PushTxSuccess = 0;
      PushTxInvalidated = 1;
      PushTxMempoolConflict = 2;
      PushTxMempoolFull = 3;
      PushTxOtherError = 5;
      PushTxAlreadyInChain = 6;
      PushTxAlreadyInMempool = 7;
   }

   message TXPushResult
   {
      string request_id = 1;
      string push_id = 2;
      bytes  tx_hash = 3;
      PushTxResult result = 4;
      string error_message = 5;
   }

   message WalletUnconfirmedTarget
   {
      string wallet_id = 1;
      uint32 conf_count = 2;
   }

   message WalletIDs
   {
      repeated string wallet_ids = 1;
   }

   message AddressTxNsResponse
   {
      message AddressTxNs {
         string wallet_id = 1;

         message AddressTxN {
            bytes  address = 1;
            uint32 txn = 2;
         }
         repeated AddressTxN txns = 2;
      }
      repeated AddressTxNs wallet_txns = 1;
   }

   message WalletBalanceResponse
   {
      message WalletBalance {
         string wallet_id = 1;
         uint64 full_balance = 2;
         uint64 spendable_balance = 3;
         uint64 unconfirmed_balance = 4;
         uint32 address_count = 5;

         message AddressBalance {
            bytes  address = 1;
            uint64 full_balance = 2;
            uint64 spendable_balance = 3;
            uint64 unconfirmed_balance = 4;
         }
         repeated AddressBalance addr_balances = 6;
      }
      repeated WalletBalance balances = 1;
   }

   message TXHashes
   {
      repeated bytes tx_hashes = 1;
      bool disable_cache = 2;
   }

   message Transactions
   {
      repeated bytes transactions = 1;
   }

   oneof data
   {
      Loading          loading = 1;
      Empty            ready   = 2;
      Empty            reconnect = 3;
      Empty            settings_request = 4;
      Settings         settings_response = 5;
      State            state_changed = 6;
      NewKeyCompare    compare_key = 7;
      bool             key_compared = 8;
      RegisterWallet   register_wallet = 10;
      WalletRegistered wallet_registered = 11;
      Refresh          refresh = 12;
      NewBlock         new_block = 13;
      ZCInvalidated    zc_invalidated = 14;
      ZCReceived       zc_received = 15;
      TXPushRequest    tx_push = 16;
      TXPushResult     tx_push_result = 17;
      string           tx_push_timeout = 18;
      WalletUnconfirmedTarget set_unconf_target = 19;
      string           unconf_target_set = 20;
      WalletIDs        addr_txn_request = 21;
      AddressTxNsResponse addr_txn_response = 22;
      WalletIDs        wallet_balance_request = 23;
      WalletBalanceResponse wallet_balance_response = 24;
      TXHashes         get_txs_by_hash = 25;
      Transactions     transactions = 26;
   }
}


message ConnectionState
{
   int32  code = 1;
   string text = 2;
}


message WalletSyncInfo
{
   int32  format = 1;
   string id = 2;
   string name = 3;
   string description = 4;
   int32  network_type = 5;
   bool   watch_only = 6;
   repeated int32 encryption_types = 7;
   repeated bytes encryption_keys = 8;

   message KeyRank {
      uint32 m = 1;
      uint32 n = 2;
   }
   KeyRank encryption_rank = 9;
}


message WalletInfo
{
   string id = 1;
   int32  format = 2;
   string name = 3;
   string description = 4;
   int32  network_type = 5;
   bool   watch_only = 6;
   repeated int32 encryption_types = 7; 
   repeated bytes encryption_keys = 8;

   message KeyRank {
      uint32 m = 1;
      uint32 n = 2;
   }
   KeyRank encryption_rank = 9;
   int32  wallet_type = 10;
   uint32 purpose = 11;
   bool   primary = 12;
}

message HDWalletData
{
   message Leaf {
      string id = 1;
      string path = 2;
      bool   ext_only = 3;
      string name = 4;
      string desc = 5;
      bytes  extra_data = 6;	// optional
   }
   message Group {
      uint32 type = 1;
      string name = 2;
      string desc = 3;
      repeated Leaf leaves = 4;
      bool  ext_only = 5;
      bytes salt = 6;	// optional - for Auth group
   }
   string wallet_id = 1;
   repeated Group groups = 2;
   bool   is_primary = 3;
}


message SignerMessage
{
   message WalletsInfo
   {
      repeated WalletSyncInfo wallets = 1;
   }

   message SyncAddresses
   {
      string wallet_id = 1;
      repeated bytes addresses = 2;
   }

   message SyncAddrResult
   {
      string wallet_id = 1;
      int32  status = 2;
   }

   message SyncNewAddresses
   {
      string wallet_id = 1;
      repeated string indices = 2;
      bool single = 3;
   }

   message NewAddressesSynced
   {
      message AddrIndexPair {
         string address = 1;
         string index = 2;
      }

      string wallet_id = 1;
      repeated AddrIndexPair addresses = 2;
   }

   message ExtendAddrChain
   {
      string wallet_id = 1;
      uint32 count = 2;
      bool   ext_int = 3;
   }

   message WalletData
   {
      string wallet_id = 1;
      uint32 high_ext_index = 2;
      uint32 high_int_index = 3;

      message AddressData {
         string index = 1;
         string address = 2;
         string comment = 3;
      }
      repeated AddressData addresses = 4;
      repeated AddressData addr_pool = 5;

      message TxComment {
         bytes  tx_hash = 1;
         string comment = 2;
      }
      repeated TxComment tx_comments = 6;
   }

   message SyncAddressComment
   {
      string wallet_id = 1;
      string address = 2;
      string comment = 3;
   }

   message SyncTxComment
   {
      string wallet_id = 1;
      bytes  tx_hash = 2;
      string comment = 3;
   }

   message SetSettlementId
   {
      string wallet_id = 1;
      bytes  settlement_id = 2;
   }

   message RootPubKey
   {
      string wallet_id = 1;
      bytes  pub_key = 2;
      bool   success = 3;
   }

   oneof data
   {
      NewKeyCompare      new_key_request  = 1;
      bool               new_key_response = 2;
      ConnectionState    state = 3;
      string             auth_leaf_added = 4;
      Empty              wallets_list_updated = 5;
      Empty              wallet_storage_decrypted = 6;
      Empty              need_new_wallet_prompt = 7;
      Empty              wallets_ready_to_sync = 8;
      bool               window_visible_changed = 9;
      Empty              start_wallets_sync = 10;
      WalletsInfo        wallets_info = 11;
      SyncAddresses      sync_addresses = 12;
      SyncAddrResult     sync_addr_result = 13;
      SyncNewAddresses   sync_new_addresses = 14;
      NewAddressesSynced new_addresses = 15;
      ExtendAddrChain    ext_addr_chain = 16;
      NewAddressesSynced addr_chain_extended = 17;
      string             sync_wallet = 18;
      WalletData         wallet_synced = 19;
      string             sync_hd_wallet = 20;
      HDWalletData       hd_wallet_synced = 21;
      SyncAddressComment sync_addr_comment = 22;
      SyncTxComment      sync_tx_comment = 23;
      SetSettlementId    set_settl_id = 24;
      bool               settl_id_set = 25;
      string             get_root_pubkey = 26;
      RootPubKey         root_pubkey = 27;
      string             del_hd_root = 28;
      string             del_hd_leaf = 29;
   }
}


message WalletsMessage
{
   message Loading
   {
      uint32 nb_wallets = 1;
      repeated string wallet_id = 2;
   }

   message WalletError
   {
      string wallet_id = 1;
      string error_message = 2;
      int32  error_code = 3;
   }

   message WalletData
   {
      message AddressData {
         string index = 1;
         string address = 2;
         string comment = 3;
      }

      string  wallet_id = 1;
      repeated AddressData used_addresses = 2;
   }

   message WalletBalances
   {
      string wallet_id = 1;
      double total_balance = 2;
      double spendable_balance = 3;
      double unconfirmed_balance = 4;
      uint32 nb_addresses = 5;

      message AddressData {
         bytes  address = 1;
         uint32 txn = 2;
         uint64 total_balance = 3;
         uint64 spendable_balance = 4;
         uint64 unconfirmed_balance = 5;
      }
      repeated AddressData address_balances = 6;
   }

   message TXComment
   {
      bytes  tx_hash = 1;
      string comment = 2;
      string wallet_id = 3;
   }

   message WalletAddresses
   {
      string wallet_id = 1;
      repeated string addresses = 2;
   }

   message AddressComments
   {
      message AddrComment {
         string address = 1;
         string comment = 2;
      }
      string wallet_id = 1;
      repeated AddrComment comments = 2;
   }

   oneof data
   {
      Loading         loading = 1;
      Empty           ready   = 2;
      WalletError     error = 3;
      WalletInfo      wallet_loaded = 4;
      string          auth_leaf_created = 5;
      string          balance_updated = 6;
      string          wallet_changed = 7;
      string          wallet_meta_changed = 8;
      string          wallet_ready = 9;
      string          wallet_reset = 10;    
      Empty           start_wallets_sync = 11;
      string          hd_wallet_get = 12;
      HDWalletData    hd_wallet = 13;
      string          wallet_get = 14;
      WalletData      wallet_data = 15;
      string          get_wallet_balances = 16;
      WalletBalances  wallet_balances = 17;
      bytes           tx_comment_get = 18;
      TXComment       tx_comment = 19;
      string          get_used_addresses = 20;
      string          get_ext_addresses = 21;
      string          get_int_addresses = 22;
      WalletAddresses wallet_addresses = 23;
      WalletAddresses get_addr_comments = 24;
      AddressComments addr_comments = 25;
      AddressComments set_addr_comments = 26;
      TXComment       set_tx_comment = 27;
      string          get_spendable_utxos = 28;
   }
}


message OnChainTrackMessage
{
   oneof data
   {
      Empty    loading = 1;
   }
}

message AuthEidMessage
{
   oneof data
   {
      Empty    loading = 1;
   }
}
