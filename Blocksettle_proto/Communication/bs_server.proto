/*

***********************************************************************************
* Copyright (C) 2020 - 2021, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package Blocksettle.Server;

import "bs_api_server.proto";
import "bs_api_server_pb.proto";
import "bs_server_storage.proto";
import "bs_types.proto";
import "common.proto";
import "pb_cli.proto";
import "trade_history.proto";

message Empty
{
}

enum PrivBridgeType
{
   PrivBridgeUnknownType         = 0;
   PrivBridgeStart               = 1;
   PrivBridgeReconnect           = 2;
   PrivBridgeSuspendTrading      = 3;
   PrivBridgeResumeTrading       = 4;
   PrivBridgeCreateUser          = 5;
   PrivBridgeArmoryDbReset       = 6;
   PrivateBridgeGetHashedEmail   = 7;
}

message PrivBridgeCreateUserRequest
{
   string email = 1;
}

message PrivBridgeResponse
{
   int32  result_code = 1;
   string error_text = 2;
}

message GetHashedEmailRequest
{
   repeated string customer_email = 1;
}

message GetHashedEmailResponse
{
   message EmailHash
   {
      string customer_email   = 1;
      string email_hash       = 2;
   }

   repeated EmailHash email_hash = 1;
}

message PrivateBridgeMessage
{
   PrivBridgeType type = 1;
   oneof data {
      PrivBridgeCreateUserRequest   create_user                = 2;
      string                        message                    = 3;
      PrivBridgeResponse            response                   = 4;
      GetHashedEmailRequest         get_hashed_email_request   = 5;
      GetHashedEmailResponse        get_hashed_email_response  = 6;
   }
}


message WalletMessage
{
   message AuthWalletLoaded
   {
      string wallet_id = 1;	// not set atm
      repeated string addresses = 2;
   }

   message Addresses
   {
      string wallet_id = 1;
      repeated string addresses = 2;
   }

   message DepositAddressTX
   {
      string address = 1;
      int64  value = 2;
      bytes  tx_hash = 3;
      uint32 nb_conf = 4;
   }

   message OutInstaTxRequest
   {
      string out_address = 1;
      uint64 amount = 2;
   }

   message OutInstaTxResponse
   {
      string out_address = 1;
      bytes  signed_tx = 2;
   }

   message ReturnRejectedDepositRequest
   {
      string   deposit_address   = 1;
      bytes    deposit_tx_id     = 2;
      string   return_address    = 3;
   }

   message ReturnRejectedDepositResponse
   {
      bytes signed_tx = 1;
   }

   oneof data {
      Empty                                  wallet_reload           = 1;
      string                                 wallet_loaded           = 2;	// wallet id
      AuthWalletLoaded                       auth_wallet_loaded      = 3;
      Blocksettle.Communication.pbcli.LoadUTXOResponse utxos         = 4;
      bool                                   get_all_utxo            = 5;
      bytes                                  bootstrap_data          = 6;
      uint32                                 get_new_trading_addrs   = 7;
      Addresses                              trading_addresses       = 8;
      uint32                                 get_new_deposit_addrs   = 9;
      Addresses                              deposit_addresses       = 10;
      DepositAddressTX                       deposit_address_tx      = 11;
      OutInstaTxRequest                      out_insta_tx_request    = 12;
      OutInstaTxResponse                     out_insta_tx_response   = 13;
      ReturnRejectedDepositRequest           return_deposit_request  = 14;
      ReturnRejectedDepositResponse          return_deposit_response = 15;
      Empty                                  get_hot_wallet_balance  = 16;
      BlockSettle.Common.ArmoryMessage.WalletBalanceResponse hot_wallet_balance = 17;
   }
}


message CCDefinitionsData
{
   repeated string cc = 1;
}

message CCTxValidRequest
{
   string request_id = 1;
   string cc = 2;
   bytes  tx = 3;
   string cc_recv_address = 4;
   string xbt_recv_address = 5;
   uint32 qty = 6;
   uint64 xbt_recv_amount = 7;
}

message CCTxValidResponse
{
   string request_id = 1;
   bool   is_valid = 2;
   string debug_string = 3;
   bytes  tx_hash = 4;
}

message CCValidateHalvesRequest
{
   string settlement_id = 1;
   bytes  requester_tx = 2;
   bytes  dealer_tx = 3;
   string cc = 4;
   string requester_receipt_addr = 5;
   string dealer_receipt_addr = 6;
   double quantity = 7;
   double price = 8;
   bool   requester_buys = 9;
   bytes  tx_hash = 10;
}

message CCValidateHalvesResponse
{
   string settlement_id = 1;
   bool   success = 2;
   repeated OutPointData outpoints = 3;
   ReturnData return = 4;

   message ReturnData {
      int32  index = 1;
      string address = 2;
      uint32 amount = 3;
   }
}

message CCValidateHalfRequest
{
   enum TxType {
      Unknown = 0;
      Requester = 1;
      Dealer = 2;
      Merged = 3;
   }
   string request_id = 1;
   string cc = 2;
   uint32 qty = 3;
   bool   req_sells = 4;
   double price = 5;
   bytes  coin_input = 6;
   TxType tx_type = 7;
}

message CCValidateHalfResponse
{
   enum Result {
      AllOk = 0;
      ValueMismatch = 1;
      InvalidInput  = 2;
      InvalidCCData = 3;
      OutputsDisorder = 4;
      InvalidOutput = 5;
   }
   string request_id = 1;
   Result result = 2;
   repeated bytes cc_inputs = 3;
}

message CCUpdatedGenesisAddress
{
   string cc_name    = 1;
   string ga_address = 2;
}

message LoadedCCDefinition
{
   string cc_name       = 1;
   string ga_address    = 2;
   int32  lot_size      = 3;
}

enum CcTrackMessageType
{
   CcTrackUnknownType         = 0;
   CcTrackCCDefinitions       = 1;
   CcTrackIsTxValid           = 2;
   CcTrackValidateHalves      = 3;
   CcTrackNewDefinitions      = 4;
   CcTrackDisabledDefinition  = 5;
   CcUpdatedGenesisAddress    = 6;
   CCDefinitionLoaded         = 7;
   CcTrackValidateUnsignedHalf= 8;
}

message CcTrackMessage
{
   CcTrackMessageType type = 1;
   oneof data {
      CCDefinitionsData          cc_definitions          = 2;
      CCTxValidRequest           tx_valid_request        = 3;
      CCTxValidResponse          tx_valid_response       = 4;
      CCValidateHalvesRequest    cc_valid_request        = 5;
      CCValidateHalvesResponse   cc_valid_response       = 6;
      CCUpdatedGenesisAddress    updated_genesis_address = 7;
      LoadedCCDefinition         loaded_cc_definition    = 8;
      CCValidateHalfRequest      cc_unsigned_half_req    = 9;
      CCValidateHalfResponse     cc_unsigned_half_resp   = 10;
   }
}


enum GenoaType
{
   GenoaUnknownType                       = 0;
   GenoaReconnect                         = 1;
   GenoaHeartbeat                         = 2;
   GenoaClientConnected                   = 3;
   GenoaAccountsAvailable                 = 4;
   GenoaAccounts                          = 5;
   GenoaNewAccount                        = 6;
   GenoaGetXBTReservations                = 7;
   GenoaGetCCReservations                 = 8;
   GenoaCancelCCReservation               = 9;
   GenoaCancelXBTReservation              = 10;
   GenoaReserveCashXBT                    = 11;
   GenoaUpdateReservation                 = 12;
   GenoaCompleteXbtCashTransfer           = 13;
   GenoaUpdateBalanceType                 = 14;
   GenoaExecuteFxTrade                    = 15;
   GenoaFindOrdersForUser                 = 16;
   GenoaUserTradingStatus                 = 17;
   GenoaTradeXbtUpdate                    = 18;
   GenoaSendCCToken                       = 19;
   GenoaReserveCC                         = 20;
   GenoaCompleteCCReserve                 = 21;
   GenoaGetUserAccounts                   = 22;
   GenoaReloadCustomerBalance             = 23;
   GenoaEODUpdate                         = 24;
   GenoaMigrateUserIds                    = 25;
   GenoaApiKey                            = 26;
   GetEntityName                          = 27;
   GetUserEmail                           = 28;
   GenoaRegisterAccount                   = 29;
   GenoaNewApiKeyType                     = 30;
   GenoaListApiKeysType                   = 31;
   GenoaDeleteApiKeyType                  = 32;
   GenoaCreateExternalAccountType         = 33;
   GenoaGetAllExternalAccountsType        = 34;
   GenoaGetDepositInfoType                = 35;
   GenoaWithdrawToExternalAccountType     = 36;
   GenoaGetCustomerBalance                = 37;
   GenoaLoadCustomerImBalance             = 38;
   GenoaRegisterXBT1DayDeliverableTrade   = 39;
   GenoaRegisterXBT1DayCashSettledTrade   = 40;
   GenoaSendCutoffPrice                   = 41;
   GenoaLoadDeliveryObligations           = 42;
   GenoaSetDeliveryAddress                = 43;
   GenoaSettleDelivery                    = 44;
   GenoaTradeCycleStatus                  = 45;
   GenoaTradingDayOpen                    = 46;
   GenoaReloadAccounts                    = 47;
   GenoaAccountReloaded                   = 48;
   GenoaCreateIbanAgreementUrlType        = 49;
   GenoaGetIbanAccountsType               = 50;
   GenoaGetIbanAccountDetailsType         = 51;
   GenoaOpenInterestType                  = 52;
   GenoaUserNotify                        = 53;
   GenoaRegisterXBTDepositType            = 54;
   GenoaConfirmXBTDepositType             = 55;
   GenoaRegisterXBTWithdrawType           = 56;
   GenoaConfirmXBTWithdrawType            = 57;
   GenoaOpenDeliveryPeriodType            = 58;
   GenoaCloseDeliveryPeriodType           = 59;
   GenoaReportRejectedDeposit             = 60;
   GenoaTradeHistory                      = 61;
}

message GenoaConnectedBroadcast
{
   bool success = 1;
   string genoa_version = 2;
   string blocksettle_version = 3;
   string unify_version = 4;
   string landfall_version = 5;
}

message GenoaDisconnectedBroadcast
{
   int32 error = 1;
}

message GenoaXBTReservation
{
   int32  subsystem = 1;
   string requester_trd_account = 2;
   int64  requester_entity_id = 3;
   string dealer_trd_account = 4;
   int64  dealer_entity_id = 5;
   string settlement_id = 6;
   string cl_ord_id = 7;
   double xbt_amount = 8;
   double ccy_amount = 9;
   string currency = 10;
   bool   requester_sells = 11;
   string requester_pub_key = 12;
   string dealer_pub_key = 13;
   bytes  unsigned_payin = 14;
   bytes  signed_payin = 15;
   bytes  signed_payout = 16;
   uint64 created_timestamp = 17;
   string last_status = 18;
}

message GenoaCCReservation
{
   string trade_id = 1;
   int64  requester_entity_id = 2;
   int64  dealer_entity_id = 3;
   string product = 4;
   double amount = 5;
   double price = 6;
   bool   requester_buys = 7;
   bytes  requester_tx_data = 8;
   string requester_recv_address = 9;
   bytes  dealer_tx_data = 10;
   string dealer_recv_address = 11;
   uint64 created_timestamp = 12;
}

message GenoaXBTReservationsResponse
{
   bool   success = 1;
   string error_text = 2;
   repeated GenoaXBTReservation reservations = 3;
}

message GenoaCCReservationResponse
{
   bool   success = 1;
   string error_text = 2;
   repeated GenoaCCReservation reservations = 3;
}

message GenoaCancelCCReservationRequest
{
   string reservation_id = 1;
}

message GenoaCancelCCReservationResponse
{
   bool   success = 1;
   string error_text = 2;
}

message GenoaUserRequest
{
   string entity_name = 1;
}

message GenoaOrderData
{
   string id               = 11;
   int32  subsystem        = 1;
   double price            = 2;
   string contra_product   = 3;
   double quantity         = 4;
   double contra_quantity  = 5;
   string product          = 6;
   int32  trade_status     = 7;
   uint64 timestamp        = 8;
   string status           = 9;
   int32  trade_type       = 10;
   double cut_off_price    = 12;
   double trade_im         = 13;
   bool   is_rollover      = 14;
}

message GenoaFindOrdersResponse
{
   bool   loaded = 1;
   string error_text = 2;
   string entity_name = 3;
   repeated GenoaOrderData orders = 4;
}

message GenoaTradingStatusResponse
{
   bool   success       = 1;
   string error_text    = 2;
   int32  user_type     = 3;
}

message GenoaReserveXbtResponse
{
   string settlement_id = 1;
   bool   success       = 2;
   string error_message = 3;
   string currency      = 4;
   double new_balance   = 5;

   CustomerAccountData changed_account = 6;
}

message GeanoReserveCCResponse
{
   bool     success        = 1;
   string   error_message  = 2;
}

message GenoaUpdateReserveRequest
{
   string reserve_id = 1;
   repeated KeyValue values = 2;

   message KeyValue {
      string key = 1;
      string value = 2;
   }
}

message GenoaXbtCompleteTransferResponse
{
   bool   settled = 1;
   bool   complete = 2;
   string error_text = 3;
   CustomerAccountData changed_account = 4;
   string currency = 5;
   double new_balance = 6;
}

message GenoaFxTradeResponse
{
   int64  sequence_num = 1;
   string cl_ord_id = 2;
   string currency_pair = 3;
   bool   matched = 4;
   string error_text = 5;
   repeated AccountBalances account_balances = 6;

   message AccountBalances {
      string entity_name = 1;
      repeated Balance balances = 2;

      message Balance {
         string currency = 1;
         double balance = 2;
      }
   }
}

message GenoaTradeXbtUpdateRequest
{
   string settlement_id = 1;
   string status = 2;
}

message GenoaSendCCTokenRequest
{
   string user_id    = 1;
   string cc_token   = 2;
   string cc_name    = 3;
   uint32 amount     = 4;
}

message GenoaAccountUserRequest
{
   int64  entity_id = 1;
   string entity = 2;
   string email = 3;
}

message GenoaAccountsData
{
   repeated CustomerAccountData data = 1;
   repeated CurrencyMap currency_map = 2;
   string error_text = 3;

   message CurrencyMap {
      string currency = 1;
      int64  currency_id = 2;
   }
}

message GenoaAccountsBalanceUpdate
{
   string entity_name = 1;
   string currency = 2;
   double balance = 3;
}

enum GenoaAccountRequestType
{
   GenoaAccountUnknown           = 0;
   GenoaAccountUser              = 1;
   GenoaAccountUsers             = 2;
   GenoaAccountBalancesSnapshot  = 3;
}

message GenoaAccountMessage
{
   GenoaAccountRequestType type = 1;
   oneof data {
      GenoaAccountUserRequest    user_request      = 2;
      CustomerAccountData        account_data      = 3;
      GenoaAccountsData          accounts          = 4;
      bytes                      balance_snapshot  = 5;
      GenoaAccountsBalanceUpdate balance_update    = 6;
   }
}

message GenoaAccountData
{
   string   email          = 1;
   string   entity_name    = 2;
   int64    entity_id      = 3;
   string   account_name   = 4;
   string   account_type   = 5;
   int64    account_id     = 6;
   string   email_hashed   = 7;
}

message GenoaAccountInfoResponse
{
   string email = 1;
   repeated GenoaAccountData accounts = 2;
   string error_text = 3;
}

message GenoaAccountBalanceRequest
{
   string entity_name = 1;
   repeated string currency = 2;
}

message GenoaAccountBalanceResponse
{
   string entity_name = 1;
   repeated Balance balances = 2;
   string error_text = 3;

   message Balance {
      string currency = 1;
      double balance = 2;
   }
}

message GenoaEODUpdateMessage
{
   message GenoaPrice
   {
      string product = 1;
      double price   = 2;
   }

   string               date     = 1;
   repeated GenoaPrice  prices   = 2;
}

message GenoaApiKeyCheckRequest
{
   string api_key = 1;
   string ip_addr = 2;
}

message GenoaApiKeyCheckResponse
{
   string api_key             = 1;
   string entity_name         = 2;
   bs.types.ApiKeyError error = 3;
}

message UserEntityInfo
{
   string user_email    = 1;
   string entity_name   = 2;
}

message AffectedEntities
{
   repeated string entity_name = 1;
}

message CutoffPriceProcessingResult
{
   bool              result            = 1;
   AffectedEntities  affected_entities = 2;
}

message XBT1DayTradeResult
{
   string   cl_ord_id      = 1;
   bool     matched        = 2;
   string   error_text     = 3;
}

message SetDeliveryAddress
{
   string trade_id            = 1;
   string bs_delivery_address = 2;
}

message SetDeliveryAddressResponse
{
   string   trade_id = 1;
   bool     result   = 2;
}

message SettleDelivery
{
   string trade_id = 1;
}


message LoadedGenoaObligationData
{
   string entity_name         = 1;
   string product             = 2;
   string trade_id            = 3;
   string bs_delivery_address = 4;
   double price               = 5;
   double xbt_amount          = 6;
}

message LoadAllObligationsResponse
{
   bool                                loaded      = 1;
   repeated LoadedGenoaObligationData  obligation  = 2;
}

message GenoaGetCurrentTradeCycleDetails
{
   bool success                     = 1;
   string error_msg                 = 2;
   string product_name              = 3;
   int64 cut_off_at                 = 4;
   double seconds_time_to_cut_off   = 5;
   double open_interest             = 6;
   double last_cut_off_price        = 7;
   double fee                       = 8;
   string fee_ccy                   = 9;
   double im                        = 10;
}

message GenoaEstimateImRequest
{
   string product_name = 1;
   double qty = 2;
   string entity_name = 3;
}

message GenoaEstimateImResponse
{
   bool success = 1;
   string error_msg = 2;
   string entity_name = 3;

   double expected_im_reservation = 10;
   double fee_amount = 12;
   string product_name = 13;
}

message GenoaSendCutoffPriceReq
{
   string   product_name      = 1;
   double   cutoff_price      = 2;
   bool     price_available   = 3;
}

message GenoaTradingDayOpenMsg
{
   string            product_name         = 1;
   int64             cut_off_at           = 2;
   double            seconds_to_cut_off   = 3;
   double            last_cut_off_price   = 4;
}

message GenoaOpenInterestMsg
{
   string            product_name         = 1;
   double            open_interest        = 2;
}

message GenoaUserNotifyMsg
{
   string            broadcast_to         = 1;
   string            message              = 2;
   string            code                 = 3;
   string            type                 = 4;
}

message GenoaRegisterAccountRequest
{
   string answers = 1;
   string kyc = 2;
}

message GenoaRegisterAccountResponse
{
   bool success = 1;
   string error_code = 2;
   string error_msg = 3;
   string entity_name = 4;
}

message GenoaCreateIbanAgreementUrlRequest
{
   string   entity_name          = 1;
   string   country_short_code   = 2;
   string   iban                 = 3;
   string   redirect             = 4;
   bool     sandbox              = 5;
}

message GenoaCreateIbanAgreementUrlResponse
{
   bool error = 1;
   string message = 2;
   string ref = 3;
   string initiate = 4;
}

message GenoaGetIbanAccountsRequest
{
   string requisitions_id  = 1;
   string entity_name      = 2;
}

message GenoaGetIbanAccountsResponse
{
   bool loaded = 1;
   repeated string results = 2;
}

message GenoaGetIbanAccountDetailsRequest
{
   string account_ref = 1;
}

message GenoaGetIbanAccountDetailsResponse
{
   bool     loaded            = 1;
   string   resource_id       = 2;
   string   iban              = 3;
   string   currency          = 4;
   string   name              = 5;
   string   product           = 6;
   string   cash_account_type = 7;
   string   account_ref       = 8;
}

message GenoaNewApiKeyRequest
{
   string entity_name = 1;
   string label = 2;
   string ip = 3;
}

message GenoaNewApiKeyResponse
{
   bool error = 1;
   GenoaListApiKeysResponse.ApiKey key = 2;
   string secret = 3;
}

message GenoaListApiKeysRequest
{
   string entity_name = 1;
}

message GenoaListApiKeysResponse
{
   message ApiKey
   {
      int32 id = 1;
      string token = 2;
      string allow = 3;
      string label = 4;
      string created = 5;
   }

   bool loaded = 1;
   repeated ApiKey keys = 2;
}

message GenoaDeleteApiKeyRequest
{
   string entity_name = 1;
   int32 key_id = 2;
}

message GenoaDeleteApiKeyResponse
{
   bool error = 1;
   int32 key_id = 2;
}

message GenoaCreateExternalAccountRequest
{
   string entity_name = 1;
   string account_ref = 2;
}

message GenoaCreateExternalAccountResponse
{
   message ExternalAccountInfo
   {
      string   name        = 1;
      string   created_at  = 2;
      string   bank_name   = 3;
   }

   bool                 created  = 1;
   ExternalAccountInfo  account  = 2;
}

message GenoaGetAllExternalAccountsRequest
{
   string entity_name = 1;
}

message GenoaGetAllExternalAccountsResponse
{
   message ExternalAccountInfo
   {
      string   name        = 1;
      string   created_at  = 2;
      string   bank_name   = 3;
   }

   bool loaded = 1;

   repeated ExternalAccountInfo accounts = 2;
}

message GenoaGetDepositInfoRequest
{
   string entity_name = 1;
}

message GenoaGetDepositInfoResponse
{
   bool loaded = 1;
   string data = 2;
}

message GenoaWithdrawToExternalAccountRequest
{
   string entity_name = 1;
   string account_name = 2;
   double amount = 3;
   string ccy = 4;
}

message GenoaWithdrawToExternalAccountResponse
{
   bool success = 1;
   string error_message  = 2;
}

message GenoaRegisterXBTDepositRequest
{
   string entity_name   = 1;
   double price         = 2;
   double xbt_amount    = 3;
   double eur_amount    = 4;
   string deposit_id    = 5;
}

message GenoaRegisterXBTDepositResponse
{
   bool     result         = 1;
   string   error_message  = 2;
}

message GenoaConfirmXBTDepositRequest
{
   string deposit_id = 1;
}

message GenoaConfirmXBTDepositResponse
{
   bool     result         = 1;
   string   error_message  = 2;
}
message GenoaRegiserXBTWithdrawRequest
{
   string entity_name   = 1;
   double price         = 2;
   double xbt_amount    = 3;
   double eur_amount    = 4;
   string deposit_id    = 5;
   double fee           = 6;
}

message GenoaRegiserXBTWithdrawResponse
{
   bool     result         = 1;
   string   error_message  = 2;
}

message GenoaConfirmXBTWithdrawRequest
{
   string deposit_id = 1;
}

message GenoaConfirmXBTWithdrawResponse
{
   bool     result         = 1;
   string   error_message  = 2;
}

message GenoaReportRejectedDepositRequest
{
   string entity_name      = 1;
   string tx_id            = 2;
   string return_address   = 3;
   uint64 validation_score = 4;
}

message GenoaGeneralResponse
{
   bool     result         = 1;
   string   error_message  = 2;
}

message GenoaTradeHistoryRequest
{
   string entity_name = 1;
   uint32 limit = 2;
   uint32 offset = 3;
}

message GenoaTradeHistoryResponse
{
   repeated GenoaOrderData orders = 1;
   uint32 count = 2;
   bool loaded = 3;
}

message GenoaMessage
{
   message FutureTradeData
   {
      TradeDataMessage  trade                      = 1;
      double            IM_reserve_acquirer        = 2;
      double            DM_reserve                 = 3;
      double            IM_reserve_counterparty    = 4;
      string            dealer_trading_account     = 5;
      double            net_exposure_acquirer      = 6;
      double            net_exposure_counterparty  = 7;
      int64             valid_duration             = 8;
   }

   GenoaType type = 1;
   oneof data {
      GenoaConnectedBroadcast          connected                  = 2;
      GenoaDisconnectedBroadcast       disconnected               = 3;
      GenoaXBTReservationsResponse     xbt_reservations           = 4;
      GenoaCCReservationResponse       cc_reservations            = 5;
      GenoaCancelCCReservationRequest  cancel_cc_res_request      = 7;
      GenoaCancelCCReservationResponse cancel_cc_res_response     = 8;
      GenoaUserRequest                 user_request               = 9;
      GenoaFindOrdersResponse          find_orders_response       = 10;
      GenoaTradingStatusResponse       trd_status_response        = 11;
      TradeDataXbtMessage              xbt_reserve_request        = 12;
      GenoaReserveXbtResponse          xbt_reserve_response       = 13;
      GenoaUpdateReserveRequest        update_reservation_request = 14;
      bool                             success_response           = 15;
      TradeDataMessage                 fx_trade_request           = 16;
      GenoaFxTradeResponse             fx_trade_response          = 17;
      GenoaTradeXbtUpdateRequest       xbt_trade_update           = 18;
      GenoaXbtCompleteTransferResponse xbt_transfer_complete      = 19;
      GenoaAccountMessage              account                    = 20;
      CustomerAccountData              new_account                = 6;
      GenoaAccountsBalanceUpdate       balance_update             = 54;
      GenoaSendCCTokenRequest          cc_token                   = 21;
      TradeInfoCcData                  cc_reserve                 = 22;
      string                           settlement_id              = 23;
      string                           user_email                 = 28;
      GenoaAccountInfoResponse         user_account_response      = 29;
      GenoaAccountBalanceRequest       acc_balance_request        = 30;
      GenoaAccountBalanceResponse      acc_balance_response       = 31;
      GenoaEODUpdateMessage            eod_update                 = 32;
      GenoaApiKeyCheckRequest          api_key_request            = 33;
      GenoaApiKeyCheckResponse         api_key_response           = 34;
      UserEntityInfo                   entity_info                = 35;
      GeanoReserveCCResponse           cc_reserve_response        = 36;
      string                           entity_name                = 37;

      FutureTradeData                  xbt1day_deliverable_trade_request   = 38;
      XBT1DayTradeResult               xbt1day_deliverable_trade_response  = 39;

      FutureTradeData                  xbt1day_cash_settled_trade_request  = 40;
      XBT1DayTradeResult               xbt1day_cash_settled_trade_response = 41;

      GenoaSendCutoffPriceReq          cutoff_price               = 42;
      CutoffPriceProcessingResult      cutoff_processing_result   = 43;

      SetDeliveryAddress               set_delivery_address          = 44;
      SetDeliveryAddressResponse       set_delivery_address_response = 45;

      LoadAllObligationsResponse       loaded_obligations            = 46;
      SettleDelivery                   settle_delivery_status        = 47;

      string                           trade_cycle_status            = 53;
      GenoaGetCurrentTradeCycleDetails trade_cycle_status_resp       = 48;
      GenoaEstimateImRequest           estimate_im                   = 49;
      GenoaEstimateImResponse          estimate_im_response          = 50;
      GenoaTradingDayOpenMsg           trading_day_open              = 51;
      GenoaRegisterAccountRequest      register_account_req          = 55;
      GenoaRegisterAccountResponse     register_account_resp         = 56;

      GenoaCreateIbanAgreementUrlRequest     create_iban_agreement_req        = 57;
      GenoaCreateIbanAgreementUrlResponse    create_iban_agreement_resp       = 58;
      GenoaGetIbanAccountsRequest            get_iban_accounts_req            = 59;
      GenoaGetIbanAccountsResponse           get_iban_accounts_resp           = 60;
      GenoaGetIbanAccountDetailsRequest      get_iban_account_details_req     = 61;
      GenoaGetIbanAccountDetailsResponse     get_iban_account_details_resp    = 62;
      GenoaOpenInterestMsg                   open_interest                    = 63;
      GenoaUserNotifyMsg                     user_notify                      = 64;

      GenoaNewApiKeyRequest                  new_api_key_req                  = 65;
      GenoaNewApiKeyResponse                 new_api_key_resp                 = 66;
      GenoaListApiKeysRequest                list_api_keys_req                = 67;
      GenoaListApiKeysResponse               list_api_keys_resp               = 68;
      GenoaDeleteApiKeyRequest               delete_api_key_req               = 69;
      GenoaDeleteApiKeyResponse              delete_api_key_resp              = 70;

      GenoaCreateExternalAccountRequest         create_external_account_req        = 71;
      GenoaCreateExternalAccountResponse        create_external_account_resp       = 72;
      GenoaGetAllExternalAccountsRequest        get_all_external_accounts_req      = 73;
      GenoaGetAllExternalAccountsResponse       get_all_external_accounts_resp     = 74;
      GenoaGetDepositInfoRequest                get_deposit_info_req               = 75;
      GenoaGetDepositInfoResponse               get_deposit_info_resp              = 76;
      GenoaWithdrawToExternalAccountRequest     withdraw_to_external_account_req   = 77;
      GenoaWithdrawToExternalAccountResponse    withdraw_to_external_account_resp  = 78;

      GenoaRegisterXBTDepositRequest            xbt_register_deposit_request     = 79;
      GenoaRegisterXBTDepositResponse           xbt_register_deposit_response    = 80;
      GenoaConfirmXBTDepositRequest             xbt_confirm_deposit_request      = 81;
      GenoaConfirmXBTDepositResponse            xbt_confirm_deposit_response     = 82;

      GenoaRegiserXBTWithdrawRequest            xbt_register_withdraw_request    = 83;
      GenoaRegiserXBTWithdrawResponse           xbt_register_withdraw_response   = 84;
      GenoaConfirmXBTWithdrawRequest            xbt_confirm_withdraw_request     = 85;
      GenoaConfirmXBTWithdrawResponse           xbt_confirm_withdraw_response    = 86;

      GenoaReportRejectedDepositRequest         report_rejected_deposit          = 87;
      GenoaGeneralResponse                      report_rejected_deposit_response = 88;
      GenoaTradeHistoryRequest                  trade_history                    = 89;
      GenoaTradeHistoryResponse                 trade_history_response           = 90;
   }
}

enum GenoaServerType
{
   GenoaServerResponse           = 0;
   GenoaServerNewClient          = 1;
   GenoaServerUpdBalance         = 2;
   GenoaServerUpdTrdStatus       = 3;
   GenoaServerXbtTrdStatus       = 4;
   GenoaServerNewCcSeed          = 5;
   GenoaServerNewCCDeposit       = 6;
   GenoaTradingDayClosedSignal   = 7;
   GenoaOpenDeliveryPeriod       = 8;
   GenoaCloseDeliveryPeriod      = 9;
   GenoaTradeUpdateEvent         = 10;
}

message GenoaServerClientRequest
{
   string email = 1;
}

message GenoaServerBalanceUpdate
{
   string entity_name = 1;
   string currency = 2;
   double balance = 3;
}

message GenoaServerTradingStatusUpdate
{
   int64 entity_id = 1;
   bool  trading_enabled = 2;
}

message GenoaServerXbtTradingStatus
{
   int64  entity_id = 1;
   string status = 2;
}

message GenoaServerNewCcSeedRequest
{
   string      cc_name        = 2;
   string      correlation_id = 3;
   double      initial_price  = 4;
   uint32      lot_size       = 5;
}

message GenoaServerNewCCDepositRequest
{
   string      entity_name = 1;
   string      cc_name     = 2;
   uint32      amount      = 3;
   string      correlation_id = 4;
}

message GenoaServerTradeUpdateEvent
{
   string            entity_name    = 1;
   bs.types.Action   action         = 2;
   bs.types.Order    order          = 3;
}

message GenoaServerTradingDayClose
{
   string            product_name   = 1;
}

message GenoaServerMessage
{
   GenoaServerType type = 1;
   oneof data {
      GenoaServerClientRequest         new_client           = 2;
      GenoaServerBalanceUpdate         balance_update       = 3;
      GenoaServerTradingStatusUpdate   trd_status           = 4;
      GenoaServerXbtTradingStatus      xbt_trd_status       = 5;
      GenoaServerNewCcSeedRequest      new_cc_seed          = 6;
      GenoaServerNewCCDepositRequest   new_cc_deposit       = 7;
      GenoaServerTradeUpdateEvent      trade_update         = 8;
      GenoaServerTradingDayClose       trading_day_close    = 9;

      bool                             response             = 50;
   }
}


enum MktDataType
{
   MktDataUnknownType  = 0;
   MktDataReconnect    = 1;
   MktDataConnected    = 2;
   MktDataDisconnected = 3;
   MktDataUpdate       = 4;
}

message MktDataUpdateMessage
{
   message MktDataField
   {
      int32  type             = 1;
      double value            = 2;
      string level_quantity   = 3;
   }
   int32  asset      = 1;
   string security   = 2;

   repeated MktDataField fields = 3;
}

message MktDataMessage
{
   MktDataType type = 1;
   oneof data {
      MktDataUpdateMessage update = 2;
   }
}


enum CelerType
{
   CelerUnknownType              = 0;
   CelerClientConnected          = 1;
   CelerReconnect                = 2;
   CelerClientDisconnected       = 3;
   CelerMerchantConnected        = 4;
   CelerMerchantDisconnected     = 5;
   CelerPiggyBankConnected       = 6;
   CelerPiggyBankDisconnected    = 7;
   CelerDataConnected            = 8;
   CelerDataDisconnected         = 9;
   CelerSetUserProperties        = 10;
   CelerUpdateBalance            = 11;
   CelerSaveTrade                = 12;
   CelerSaveCcTrade              = 13;
   CelerNewCCCreated             = 15;
   CelerCreateUser               = 16;
   CelerSubscribeMerchant        = 17;
   CelerVerifyXBTQuote           = 18;
   CelerVerifyXBTQuoteRequest    = 19;
   CelerReserveCashForXBTRequest = 20;
   CelerXBTTradeRequestType      = 21;
   CelerFxTradeRequestType       = 22;
   CelerVerifyCCQuote            = 23;
   CelerVerifyCCQuoteRequest     = 24;
   CelerVerifyCCAcceptedQuote    = 25;
   CelerCCTradeRequest           = 26;
   CelerWarehouseConfiguration   = 27;
   CelerSecurityDefinition       = 28;
   CelerGetBalanceRequest        = 29;
   CelerGetAccountsRequest       = 30;
   CelerNewAccountAck            = 31;
   CelerGetUserProperty          = 32;
   CelerRegisterCCDefinition     = 33;
   CelerCheckUser                = 34;
}

message SavedTradeInfoMessage
{
   string product = 1;
   double price = 2;
   oneof qty {
      double amount = 3;
      uint64 quantity = 4;
   }
   bool   is_sell = 5;
   string trade_id = 6;
   uint64 timestamp = 7;
}

message CelerCreateUserRequest
{
   string login = 1;
   string email = 2;
   string user_id = 3;
   string password = 4;
}

message CelerResultResponse
{
   int32 status = 1;
}

message CelerSetUserPropertiesRequest
{
   string email = 1;
   string email_hash = 2;
   repeated Property properties = 3;

   message Property {
      string name = 1;
      bool   enabled = 2;
   }
}

message CelerSetUserPropertiesResponse
{
   string email = 1;
   repeated string property_names = 2;
   repeated bool results = 3;
}

message CelerGetUserPropertyRequest
{
   string email = 1;
   string email_hash = 2;
   string propery_name = 3;
}

message CelerGetUserPropertyResponse
{
   bool success = 1;
   string email = 2;
   string email_hash = 3;
   string propery_name = 4;
   string value = 5;
}

message CelerUpdateBalanceRequest
{
   string entity_name = 1;
   string currency = 2;
   double balance = 3;
}

message CelerSecurityDefData
{
   string security_id = 1;
   bool   is_private_share = 2;
}

message CelerCheckUserRequest
{
   string email_hash = 1;
}

message CelerCheckUserResponse
{
   bool     success              = 1;
   bool     user_exists          = 2;
   bool     trading_enabled      = 3;
   bool     xbt_dealing_enabled  = 4;
}

message CelerMessage
{
   CelerType type = 1;
   oneof data {
      bytes                            saved_trade             = 2;
      CelerCreateUserRequest           create_user             = 4;
      CelerSetUserPropertiesRequest    user_properties         = 5;
      CelerSetUserPropertiesResponse   user_prop_response      = 6;
      CelerUpdateBalanceRequest        user_balance            = 7;
      CelerResultResponse              response                = 9;
      bytes                            opaque_data             = 10;	// for Celer-encoded messages
      CelerSecurityDefData             security_def            = 11;
      CelerGetUserPropertyRequest      get_user_prop_request   = 12;
      CelerGetUserPropertyResponse     get_user_prop_response  = 13;
      string                           cc_name                 = 14;
      CelerCheckUserRequest            check_user_request      = 15;
      CelerCheckUserResponse           check_user_response     = 16;
   }
   int64 sequence_num = 17;
}


enum TradeHistType
{
   TradeHistReconnect               = 0;
   TradeHistSaveFxTrade             = 1;
   TradeHistSaveXbtTrade            = 2;
   TradeHistSaveCcTrade             = 3;
   TradeHistSaveCashSettledTrade    = 4;
   TradeHistSaveDeliverableTrade    = 5;
   TradeHistSaveTradeResult         = 6;
   TradeHistRequestLastTrade        = 7;
   TradeHistRequestLastBuySellTrade = 8;
   TradeHistRequestSnapshot         = 9;
   TradeHistRequestCcPrices         = 10;
   TradeHistRequestEOD              = 11;
   TradeHistRequestEODSnapshot      = 12;
   TradeHistorySetInitialPrice      = 13;
   TradeHistEODEvent                = 14;
   TradeHistPriceBookUpdate         = 15;
   TradeHistUpdatePL                = 16;
   TradeHistQueryPL                 = 17;
}

message TradeDataMessage
{
   string product = 1;
   int64  sequence_num = 2;
   string cl_ord_id = 3;
   string sell_entity = 4;
   string buy_entity = 5;
   string sell_trade_account = 6;
   string buy_trade_account = 7;
   double sell_amount = 8;
   double buy_amount = 9;
   string sell_currency = 10;
   string buy_currency = 11;
   string asset_currency = 12;
   string num_currency = 13;
   uint32 trade_timestamp = 14;
}

message BalanceData
{
   string currency = 1;
   double balance = 2;
}

message CustomerAccountData
{
   string email = 1;
   string email_hashed = 2;
   string entity_name = 3;
   int64  entity_id = 4;
   string settlement_account = 5;
   int64  settlement_acc_id = 6;
   string trading_account = 7;
   int64  tradding_acc_id = 8;
   repeated BalanceData balances = 9;
}

message TradeDataXbtMessage
{
   int32  subsystem = 1;
   string settlement_id = 2;
   string cl_order_id = 3;
   bool   requestor_sells = 4;
   string requestor_pub_key = 5;
   string dealer_pub_key = 6;
   CustomerAccountData requestor = 7;
   CustomerAccountData dealer = 8;
   double xbt_amount = 9;
   double ccy_amount = 10;
   double price = 11;
   string product = 12;
   string currency = 13;
   bytes  unsigned_payin = 14;
   bytes  signed_payin = 15;
   bytes  signed_payout = 16;
   bytes  payin_hash = 17;
   uint64 total_payin_fee = 18;
   uint64 timestamp = 19;
   string settlement_address = 20;
   int32  avg_score = 21;
   int32  min_score = 22;
   string scorechain_url = 23;
   bool   loaded_from_genoa = 24;
   string last_status = 25;
   bool   saved_in_history = 27;
   int32  trade_state = 28;
   bool payin_broadcasted_by_user = 29;
   bool payout_broadcasted_by_user = 30;
   bool cash_reserved = 31;
   uint64 next_timeout_timestamp = 32;
}

message TradeInfoCcData
{
   string cl_ord_id = 1;
   CustomerAccountData requester = 2;
   CustomerAccountData dealer = 3;
   bool   requester_buys = 4;
   string currency = 5;
   double quantity = 6;
   double price = 7;
   bytes  requester_tx_data = 8;
   string requester_recpt_address = 9;
   bytes  dealer_tx_data = 10;
   string dealer_recpt_address = 11;
   int32  validation_score = 12;
   string scorechain_url = 13;
   uint64 timestamp = 14;
   bool   saved_in_history = 15;
}

message OutPointData
{
   bytes  hash = 1;
   uint32 index = 2;
   uint32 tx_height = 3;
   uint32 tx_index = 4;
   uint64 value = 5;
   bool   spent = 6;
   bytes  spender_hash = 7;
}

message TradeDataCcMessage
{
   TradeInfoCcData cc_trade_info = 1;
   string       sell_address = 2;
   string       buy_address = 3;
   bytes        tx = 4;
   string       tx_id = 5;
   repeated OutPointData outpoints = 6;
   OutPointData return_outpoint = 7;
   uint64       zc_timestamp = 8;
}

message TradeHistResponse
{
   bool success = 1;
}

message TradeHistRequest
{
   int32  trade_type = 1;
   string product = 2;
   uint64 from_timestamp = 3;
   uint64 to_timestamp = 4;
}

message TradeHistBuySellResponse
{
   bytes buy_trade = 1;
   bytes sell_trade = 2;
}

message TradeHistSnapshotResponse
{
   repeated bytes trades = 1;
}

message TradeHistPricesResponse
{
   bool   price_set     = 1;
   double bid_price     = 2;
   double offer_price   = 3;
}

message SetInitialPriceRequest
{
   string cc_name       = 1;
   double bid_price     = 2;
   double offer_price   = 3;
}

message TradeHistEODSnapshotResponse
{
    message EODSnapshot
    {
       Communication.TradeHistory.DateContainer date  = 1;
       bytes                                    eod   = 2;
    }
    repeated EODSnapshot                     snapshot = 1;
    Communication.TradeHistory.DateContainer req_date = 2;
}

message TradeHistEODUpdate
{
   Communication.TradeHistory.DateContainer  date  = 1;
   bytes                                     eod   = 2;
}

message TradeHistMessage
{
   TradeHistType type = 1;
   oneof data {
      bytes                                        serialized_trade  = 2;
      TradeHistResponse                            response          = 5;
      TradeHistRequest                             hist_request      = 6;
      bytes                                        last_trade        = 7;
      TradeHistBuySellResponse                     buy_sell_trades   = 8;
      TradeHistSnapshotResponse                    trades_snapshot   = 9;
      TradeHistPricesResponse                      prices            = 10;
      Communication.TradeHistory.DateContainer     eod_request       = 11;
      bytes                                        eod_data          = 12;
      TradeHistEODSnapshotResponse                 eod_snapshot      = 13;
      SetInitialPriceRequest                       set_initial_price = 14;
      TradeHistEODUpdate                           eod_update        = 15;
      Communication.TradeHistory.PriceBookUpdate   price_book_update = 16;
      Storage.TradePL                              trade_pl_update   = 17;
      Storage.TradePLQuery                         trade_pl_query    = 18;
      Storage.TradePLResult                        trade_pl_result   = 19;
   }
}


enum SettlementTxType
{
   SettlementTxUnknownType          = 0;
   SettlementTxUnsignedPayinTimeout = 1;
   SettlementTxSignedPayinTimeout   = 2;
   SettlementTxPayoutTimeout        = 3;
   SettlementTxCcMatchTimeout       = 4;
   SettlementTxCcHandshakeTimeout   = 6;
   SettlementTxDelayedCancel        = 7;
}


message SettlementTxMessage
{
   SettlementTxType type = 1;
   oneof data {
      string trade_id = 2;
   }
}


enum TerminalMessageType
{
   TerminalUnknownType              = 0;
   TerminalUnsignedPayinRequest     = 2;
   TerminalSignedPayinRequest       = 3;
   TerminalSignedPayoutRequest      = 4;
   TerminalXBTTradeCancel           = 5;
   TerminalCCTradeCancel            = 6;
   TerminalOtcStart                 = 10;
   TerminalOtcVerify                = 11;
   TerminalOtcSealPayin             = 12;
   TerminalOtcTxProcess             = 13;
   TerminalOtcCancel                = 14;
   TerminalOtcUpdate                = 15;
   TerminalUpdateBalance            = 16;
   TerminalOTCcVerify               = 17;
   TerminalOTCcAccept               = 18;
   TerminalOTCcTrade                = 19;
   TerminalUpdateBlotterForEntities = 21;
   TerminalReportDelivery           = 22;
   TerminalUpdateTrade              = 23;
}

message PreimageData {
   string address = 1;
   bytes data = 2;
}

message TerminalUnsignedPayin
{
   string settlement_id = 1;
   repeated PreimageData preimage_data = 2;
   bytes unsigned_payin = 3;
}

message TerminalSignedData
{
   string settlement_id = 1;
   bytes data = 2;
}

message TerminalSignPayinRequest
{
   string settlement_id = 1;
   bytes  unsigned_payin = 2;
   bytes  payin_hash = 3;
}

message TerminalOtcStartRequest
{
   int32 request_id = 1;
   bool  is_cc = 2;
}

message TerminalOtcStartResponse
{
   int32  request_id = 1;
   string settlement_id = 2;
}

message TerminalOtcVerifyRequest
{
   bool   is_sell = 1;
   string settlement_id = 2;
   bytes  payin_tx_hash = 3;
   bytes  seller_auth_pubkey = 4;
   bytes  buyer_auth_pubkey = 5;
   int64  price = 6;
   int64  amount = 7;
   string chat_id_seller = 8;
   string chat_id_buyer = 9;
   bytes  unsigned_payin = 10;
   repeated PreimageData preimage_data = 11;
}

message TerminalOtcUpdateMessage
{
   string settlement_id = 1;
   int32  state = 2;
   string error_text = 3;
   uint64 timestamp = 4;
}

message TerminalOtcTxMessage
{
   string settlement_id = 1;
   bytes  signed_tx = 2;
}

message TerminalOTCcVerifyRequest
{
   bool   is_sell = 1;
   string settlement_id = 2;
   string cc = 3;
   bytes  cc_tx_half = 4;
   string receipt_address = 5;
   uint32 amount = 6;
   uint64 price = 7;
   string chat_id_user = 8;
}

message TerminalOTCcSignedTX
{
   string settlement_id = 1;
   bytes  signed_tx = 2;
}

message TerminalUpdateBalanceMessage
{
   repeated bs.types.Balance balances = 1;
}

message TerminalDeliveryReport
{
   enum Status {
      INVALID = 0;
      PENDING = 1;
      DELIVERED = 2;
      //REJECTED ?
   }
   string entity = 1;
   string id = 2;
   int64  to_deliver = 3;
   string bs_address = 4;
   double price = 5;
   Status status = 6;
}

message TerminalUpdateOrder
{
   bs.types.Order order = 1;
   bs.types.Action action = 2;
}

message TerminalMessage
{
   TerminalMessageType  type           = 1;
   string               address_email  = 2;

   oneof data {
      string                        settlement_id              = 3;
      TerminalUnsignedPayin         unsigned_payin             = 4;
      TerminalSignPayinRequest      sign_payin_request         = 5;
      TerminalSignedData            signed_data                = 6;
      TerminalOtcStartRequest       otc_start                  = 10;
      TerminalOtcStartResponse      otc_response               = 11;
      TerminalOtcVerifyRequest      otc_verify                 = 12;
      TerminalOtcUpdateMessage      otc_update                 = 13;
      TerminalOtcTxMessage          otc_tx                     = 14;
      TerminalUpdateBalanceMessage  update_balance_message     = 15;
      TerminalOTCcVerifyRequest     otcc_verify                = 16;
      TerminalOTCcSignedTX          otcc_tx                    = 17;
      AffectedEntities              entities_to_update         = 20;
      TerminalDeliveryReport        delivery_report            = 21;
      TerminalUpdateOrder           update_order               = 22;
   }
}


enum ProxyMessageType
{
   ProxyUnknownType        = 0;
   ProxyConnected          = 1;
   ProxyDisconnected       = 2;
   ProxyReconnect          = 3;
   ProxyOnlineUsers        = 5;
   ProxyUserStatusUpdated  = 6;
}

message ProxyOnlineUsersMessage
{
   int32 chat_users = 1;
   int32 market_users = 2;
   int32 trading_users = 3;
   int32 dealing_users = 4;
}

message ProxyUserStatusUpdatedMessage
{
   string email = 1;
   bool enabled = 2;
}

message ProxyMessage
{
   ProxyMessageType type = 1;
   oneof data {
      ProxyOnlineUsersMessage       online_users         = 2;
      ProxyUserStatusUpdatedMessage user_status_updated  = 3;
      string                        user_connected = 10;
      string                        user_disconnected = 11;
   }
}


enum WebClientType
{
   WebClientUnknownType = 0;
   WebScorechainUtxoScore = 1;
   WebScorechainCacheTX = 2;
}

message WebScorechainUtxoRequest
{
   repeated string tx_id = 1;
}

message WebScorechainUtxoResponse
{
   bool   success    = 1;
   int32  min_score  = 2;
   string url        = 3;
}

message WebScorechainCacheTxRequest
{
   bytes tx_hash = 1;
   bool  is_payin = 2;
   int32 score = 3;
}

message WebClientMessage
{
   WebClientType type = 1;
   oneof data {
      WebScorechainUtxoRequest  sc_utxo_request = 2;
      WebScorechainUtxoResponse sc_utxo_response = 3;
      WebScorechainCacheTxRequest sc_cache_tx = 4;
   }
}

enum RelayUser
{
   UserUnknown          = 0;
   UserPrivateBridge    = 1;
   UserStorage          = 2;
   UserCCTracker        = 3;
   UserCeler            = 4;
   UserGenoa            = 5;
   UserTradeHist        = 6;
   StreamPriceOffering  = 7;
}

message RelayedMessage
{
   RelayUser user = 1;
   bytes data = 2;
}

message AuthManaging
{
   message AuthAddressConfirm
   {
      string   user     = 1;
      string   address  = 2;
   }

   message SettledXbtTradeNotification
   {
      string settlement_id       = 1;

      string requester_address   = 2;
      string dealer_address      = 3;
   }

   message FilterAuthFundUTXOs
   {
      repeated bytes utxos = 1;
   }

   message AuthConfirmResponse
   {
      int32 result_code = 1;
   }

   oneof data
   {
      AuthAddressConfirm   auth_confirm_request    = 1;
      AuthConfirmResponse  auth_confirm_response   = 2;

      SettledXbtTradeNotification   settled_xbt_trade  = 3;

      FilterAuthFundUTXOs  auth_fund_utxos = 4;

      string               user_promoted_to_dealer = 5;
   }
}

enum ObligationsManagingMessageType
{
   SendCutoffPriceRequest     = 0;
   LoadCustomerObligations    = 1;
   CustomerObligation         = 2;
   LiveCutoffPriceUpdated     = 4;
   WhitelistUserAddress       = 5;
   RevokeUserAddress          = 6;
   XBTWithdraw                = 7;
};

message ObligationsManaging
{
   message CustomerObligationsRequest
   {
      string   entity_name    = 1;
   }

   message CustomerObligationsResponse
   {
      string   entity_name    = 1;
      int64    to_deliver     = 2;
      string   bs_address     = 3;
      double   cutoff_price   = 4;
      bool     detected       = 5;
   }

   message CustomerObligationRequest
   {
      string   entity_name    = 1;
      string   delivery_id    = 2;
      int64    value          = 3;
      string   bs_address     = 4;
      double   price          = 5;
   }

   message TradingDayClose
   {
      string   product_name   = 1;
   }

   message LiveCutOffPriceUpdate
   {
      bs.types.PriceBookType  price_book  = 1;
      int64                   ask         = 2;
      int64                   bid         = 3;
   }

   message SubmitWhitelistedAddress
   {
      string entity_name = 1;
      Blocksettle.Communication.ApiServer.Request.WhitelistedAddressRequest  address_data   = 2;
   }

   message SubmitAddressResponse
   {
      // bs::network::SubmitWhitelistedAddressStatus
      int32    status_code = 1;
      string   entity_name = 2;
      Blocksettle.Communication.ApiServer.Response.WhitelistedAddressResponse address_data = 3;
   }

   message RevokeUserAddress
   {
      string entity_name   = 1;
      string address       = 2;
   }

   message RevokeUserAddressResponse
   {
      string   entity_name = 1;
      string   address     = 2;
      int32    status_code = 3;
   }

   message XBTWithdrawRequest
   {
      string   entity_name = 1;
      string   address     = 2;
      double   eur_amount  = 3;
      double   price       = 4;
      double   xbt_receive_amount = 5;
      double   fee_amount  = 6;
   }

   message XBTWithdrawResponse
   {
      string   entity_name = 1;
      string   address     = 2;
      double   eur_amount  = 3;
      int32    status_code = 4;
   }

   ObligationsManagingMessageType   type = 1;

   oneof data
   {
      CustomerObligationsRequest    load_obligations_request   = 3;
      CustomerObligationsResponse   load_obligations_response  = 4;
      TradingDayClose               trading_day_close_request  = 5;
      LiveCutOffPriceUpdate         live_cutoff_price          = 6;
      SubmitWhitelistedAddress      submit_address_request     = 7;
      SubmitAddressResponse         submit_address_response    = 8;
      RevokeUserAddress             revoke_request             = 9;
      RevokeUserAddressResponse     revoke_response            = 10;
      XBTWithdrawRequest            xbt_withdraw_request       = 11;
      XBTWithdrawResponse           xbt_withdraw_response      = 12;
      CustomerObligationRequest     customer_obligation        = 13;
   }
}

message PriceStreamManaging
{
   enum MessageType
   {
      GetBestOfferingPriceForOrder  = 0;
      CleanupExpiredPriceOfferings  = 1;
      PriceConsumed                 = 2;
      SubmitPrices                  = 3;
      PullPrices                    = 4;
      DealerConnected               = 10;
      DealerDisconnected            = 11;
   };

   message GetBestOfferRequest
   {
      uint64                  xbt_amount        = 1;
      string                  requesting_entity = 2;
      bool                    get_ask_price     = 3;
      bs.types.PriceBookType  price_book        = 4;
   }

   message GetBestOfferResponse
   {

      message PriceOffer
      {
         string   owner_entity_name = 1;
         double   price             = 2;
         uint64   timestamp         = 3;
      }

      int64       xbt_amount  = 1;
      PriceOffer  best_offer  = 2;
      bool        matched     = 3;
   }

   message ClientData
   {
      bytes    client_id   = 1;
      bytes    client_data = 2;
   }

   message PriceConsumedData
   {
      string   owner_entity_name = 1;
      uint64   timestamp         = 2;
   }

   message SubmitPricesRequest
   {
      string                     owner_entity_name = 1;
      bs.types.SubmitPricesData  submit_price_data = 2;
   }

   message PullPricesRequest
   {
      string                     owner_entity_name = 1;
      bs.types.PullPricesData    pull_price_data   = 2;
   }


   MessageType   message_type = 1;

   oneof data
   {
      GetBestOfferRequest  get_best_price_offer = 2;
      GetBestOfferResponse best_price_offer     = 3;
      ClientData           client_data          = 4;
      PriceConsumedData    consumed_price       = 5;
      string               entity_name          = 6;
      SubmitPricesRequest  submit_prices        = 7;
      PullPricesRequest    pull_prices          = 8;
   }
}

message ApiServerMsg
{
   message UpdateOrder
   {
      string entity_name = 1;
      bs.types.Order order = 2;
      bs.types.Action action = 3;
   }

   message UpdateBook
   {
      Communication.TradeHistory.PriceBookUpdate data = 1;
   }

   message TradeClose
   {
      string product_name = 1;
   }

   message UserNotify
   {
      string   broadcast_to   = 1;
      string   message        = 2;
      string   code           = 3;
      string   type           = 4;
   }

   message UpdateWithdrawPrices
   {
      double   sell_price     = 1;
      double   buy_price      = 2;
      double   network_fee    = 3;
      double   min_xbt_amount = 4;
   }

   oneof data
   {
      UpdateOrder    update_order   = 2;
      UpdateBook     update_book    = 3;
      TradeClose     trade_close    = 4;
      Empty          send_prices    = 5;
      Blocksettle.Communication.ApiServerPb.Request.MaxTradeAmount get_max_trade_amount = 6;
      Blocksettle.Communication.ApiServerPb.Response.MaxTradeAmount max_trade_amount = 7;
      string         user_connected    = 8;
      string         user_disconnected = 9;
      UserNotify     user_notify       = 10;
      UpdateWithdrawPrices update_withdraw_prices = 11;
   }
}


message DealerConnMessage
{
   message OrderRequest
   {
      string product = 1;
      double qty = 2;
      bs.types.Side side = 3;
   }

   message OrderResponse
   {
      bool   success = 1;
      string product = 2;
      double qty = 3;
      bs.types.Side side = 4;
      string exchange_order_id = 5;
      double price = 6;
      string reject_reason = 7;
   }

   message PriceUpdate
   {
      double ask = 1;
      double bid = 2;
   }

   oneof data
   {
      Empty          connected      = 1;
      Empty          disconnected   = 2;
      OrderRequest   order_request  = 3;
      OrderResponse  order_response = 4;
      PriceUpdate    price_update   = 5;
   }
}
