/*

***********************************************************************************
* Copyright (C) 2018 - 2020, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto2";

package Blocksettle.Communication.pbcli;

enum CLIRequestType
{
   ErrorMessageType                 = 1;
   GetStatusMessageType             = 2;
   LoadUTXOMessageType              = 3;
   CheckAuthAddressMessageType      = 4;
   ReloadWalletMessageType          = 5;
   SendCCTokenMessageType           = 6;
   AuthVerificationTransactionType  = 8;
   AuthRevokeTransactionType        = 9;
   CCDistributionTransactionType    = 10;
   AuthVerificationRejectedType     = 11;
   GetRequestsStatType              = 14;
   GetPendingSettlementsInfo        = 15;
   SetInitialPMPriceType            = 17;
   DisablePMProductType             = 18;
   ExportRequestsType               = 19;
   ChangeUserStatusType             = 20;
   LoadConfigType                   = 21;
   SetConfigType                    = 22;
   MigrateUserIds                   = 23;
   BroadcastBSAuthRevokeTX          = 24;
   SyncGenoaUsers                   = 25;
}

enum ArmoryConnectionState
{
   ArmoryConnectionOffline    = 1;
   ArmoryConnectionScanning   = 2;
   ArmoryConnectionConnected  = 3;
   ArmoryConnectionReady      = 4;
}

enum AuthAddressVerificationState
{
   VerificationFailedState    = 1;
   InProgressState            = 2;
   NotSubmittedState          = 3;
   SubmittedState             = 4;
   PendingVerificationState   = 5;
   VerificationSubmittedState = 6;
   VerifiedState              = 7;
   RevokedState               = 8;
   RevokedByBSState           = 9;
}

enum ArmoryNodeStatus
{
   NodeStatus_Offline   = 1;
   NodeStatus_Online    = 2;
   NodeStatus_OffSync   = 3;
}

enum ArmoryNodeRpcStatus
{
   RpcStatus_Disabled   = 1;
   RpcStatus_BadAuth    = 2;
   RpcStatus_Online     = 3;
   RpcStatus_Error_28   = 4;
};

message CLIRequestPacket
{
   required CLIRequestType requestType = 1;
   optional bytes          requestData = 2;
}

message CLIResponsePacket
{
   required CLIRequestType responseType = 1;
   required bytes          responseData = 2;
}

message PBStatusResponse
{
   required bool ConnectedToCeler         = 1;
   required bool ConnectedToGenoa         = 2;
   required bool CelerMerchantConnected   = 3;
   required bool CelerPiggyBankConnected  = 4;
   required bool CelerStaticDataConnected = 5;

   required string PBVersion              = 6;

   optional string GenoaVersion           = 7;
   optional string BlocksettleVersion     = 8;
   optional string UnifyVersion           = 9;
   optional string LandfallVersion        = 10;

   required ArmoryConnectionState   armoryConnectionState   = 12;
   required int32                   currentBlock            = 13;
   required ArmoryNodeStatus        nodeStatus              = 14;
   required bool                    segwitEnabled           = 15;
   required ArmoryNodeRpcStatus     armoryRpcStatus         = 16;

   required string uptime           = 17;
   required uint64 uptime_seconds   = 18;

   required bool ConnectedToMD      = 19;
   required bool ConnectedToProxy   = 20;
}

message ErrorMessage
{
   required string messageText = 1;
   optional bytes originalMessage = 2;
}

message LoadUTXOResponse
{
   repeated Transactions serializedUTXO = 1;

   optional float feePerByte = 2;

   message Transactions {
      required string wallet = 1;
      repeated bytes  transactions = 2;
   }
}

message CheckAuthAddressRequestPacket
{
   required string authAddress = 1;
}

message CheckAuthAddressResponsePacket
{
   required string authAddress = 1;
   required AuthAddressVerificationState verificationState = 2;
}


message ReloadWalletRequest
{
   required string reason = 1;
}


message SendCCTokenRequest
{
   required string userId = 1;
   required string ccToken = 2;
   required string ccProduct = 3;
   required uint32 amount = 4;
   required string request_id = 5;
}

message TransactionBroadcastResponse
{
   required bool transaction_broadcasted = 1;
}

message AuthVerificationRejectReponse
{
   required bool fee_released = 1;
   optional string debug_message = 2;
}

message GetRequestsStatResopnse
{
   required uint32 submit_auth_count = 1;
   required uint32 revoke_auth_count = 2;
   required uint32 generate_cc_seed_count = 4;
   required uint32 cc_initial_distribution_count = 5;
}

message ProductStatistics
{
   required string product_name = 1;
   required int32  trades_count = 2;
}

message GetPendingSettlementsResponse
{
   required string snapshot_date_time = 1;

   repeated ProductStatistics cc_trades = 2;
   repeated ProductStatistics xbt_trades = 3;
}

message SetInitialPMPriceRequest
{
   required string product       = 1;
   required double bid_price     = 2;
   required double offer_price   = 3;
}

message SetInitialPMPriceResponse
{
   required string   product  = 1;
   required bool     result   = 2;
}

message DisablePMProductRequest
{
   required string   product = 1;
}

message DisablePMProductResponse
{
   required string   product  = 1;
   required bool     result   = 2;
   optional string   message  = 3;
}

message ExportRequestsRequests
{
   required string   path = 1;
}

message ExportRequestsResponse
{
   required string   path           = 1;
   required uint32   requests_count = 2;
   required bool     result         = 3;
   optional string   message        = 4;
}

message ChangeUserStatusRequest
{
   required string   user_email     = 1;
   required bool     status_enabled = 2;
}

message ChangeUserStatusResponse
{
   required string   user_email  = 1;
   required int32    new_score   = 2;
   required bool     processed   = 3;
}

message LoadConfigsRquest
{
   required string   pattern = 1;
}

message ConfigContainer
{
   required string name    = 1;
   required string value   = 2;
}

message LoadConfigResponse
{
   repeated ConfigContainer config = 1;
}

message SetConfigRequest
{
   required ConfigContainer config = 1;
}

message SetConfigResponse
{
   required bool     result         = 1;
   optional string   error_message  = 2;
}

message LoadUTXORequest
{
   required bool     load_all = 1;
}

message SyncAccountsResponse
{
   required bool     success              = 1;
   required int32    created_customers    = 2;
   required int32    updated_properties   = 3;
}
