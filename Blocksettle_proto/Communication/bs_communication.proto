/*

***********************************************************************************
* Copyright (C) 2018 - 2020, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto2";

package Blocksettle.Communication;

enum RequestType
{
   ErrorMessageResponseType            = 3;
   SubmitCCAddrInitialDistribType      = 6;
   GenerateCCSeedRequestType           = 7;
   RevokeAuthAddressRequestType        = 8;
   ConfirmAuthAddressSubmitType        = 9;
   CreateCCDefinitionRequestType       = 10;
   GetNetworkSettingsType              = 12;
   BootstrapSignedDataType             = 13;
   CreateDeliveryTxType                = 14;
}

// copy of autheid.rp.GetResultResponse.SignatureResult
message AuthEidSign
{
   enum Serialization
   {
      JSON = 0;
      PROTOBUF = 1;
   }

   required Serialization serialization = 1;

   // Serialized autheid::rp::SignatureData message.
   // We should pass it as is to be able verify signature.
   // invisible_data field is SHA256 hash of requestData.
   required bytes signature_data = 2;

   required bytes sign = 3;

   // Certificate used for sign verification
   required bytes certificate_client = 6;

   required bytes certificate_issuer = 7;

   required bytes ocsp_response = 8;
}

message RequestPacket
{
   // requestType - hint to requestData type
   required RequestType requestType = 1;
   required bytes       requestData = 2;
   optional bytes       unsignedMixIn = 4;
   optional AuthEidSign authEidSign = 5;
}

message ResponsePacket
{
   required RequestType responseType = 1;
   required bytes       responseData = 2;
   optional bytes       dataSignature = 3;
}

message ErrorMessageResponse
{
   required string errorMessage = 1;
}

message RevokeAuthAddressRequest
{
   required string authAddress = 1;
}

message ConfirmAuthSubmitRequest
{
   required string userName   = 1;
   required string address    = 2;
   required uint64 xbt_amount = 3;
}

message ClientAddress
{
   required string fullName = 1;
   optional string address1 = 2;
   optional string address2 = 3;
   optional string postcode = 4;
   optional string state = 5;
   optional string city = 6;
   optional string country = 7;
   optional string mainPhone = 8;
   optional string company = 9;
   optional string countryCode = 10;
}

message SubmitAddrForInitialDistributionRequest
{
   required bytes                prefixedAddress = 1;
   required uint32               bsSeed          = 2;
   required string               userName        = 3;
}

message SubmitAddrForInitialDistributionResponse
{
   required bool                 success         = 1;
   required bytes                prefixedAddress = 2;
   optional string               errorMessage    = 3;
}

message GenerateCCSeedRequest
{
   required string userName = 1;
   required string ccProduct = 2;
   required uint32 amount = 3;
}

message CreateCCDefinitionRequest
{
   required string cc_name       = 1;
   required uint32 lot_size      = 2;
}

message CCSeedResponse
{
   required uint32 bsSeed = 1;
   required string ccProduct = 2;
}

message GetNetworkSettingsResponse
{
   enum Status
   {
      NORMAL = 0;
      DISABLED = 1;
      LIVE_TRADING_COMING_SOON = 2;
   }

   message ConnectionData
   {
      required string host = 1;
      required uint32 port = 2;
   }

   optional ConnectionData celer = 1;
   optional ConnectionData marketData = 2;
   optional ConnectionData mdhs = 3;
   optional ConnectionData chat = 4;
   optional ConnectionData proxy = 5;
   optional Status status = 6;
   optional string statusMsg = 7;
}

message BootstrapData
{
   message CCSecurityDefinition {
      required string securityId  = 1;
      required string product     = 2;
      required string genesisAddr = 3;
      required uint64 satoshisNb  = 4;
   }

   required int32    revision             = 1;
   required bool     is_testnet           = 2;

   repeated string   proxy_keys           = 3;
   repeated string   armory_mainnet_keys  = 4;
   repeated string   armory_testnet_keys  = 5;
   repeated string   chat_keys            = 6;
   repeated string   cc_tracker_keys      = 7;

   repeated string   validation_address   = 8;

   repeated CCSecurityDefinition cc_securities  = 9;
}


message CreateDeliveryTx
{
   required float    fee_rate             = 1;
   required uint32   user_address_count   = 2;

   message Spender
   {
      repeated bytes utxo = 1;
   }

   repeated Spender  spenders = 3;

   message Recipient
   {
      required string   address  = 1;
      required uint64   amount   = 2;
   }

   repeated Recipient recipients = 4;
}
