/*

***********************************************************************************
* Copyright (C) 2018 - 2020, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package BlockSettle.Terminal;
import "common.proto";


message Empty {}

message CCDefinition
{
   string security_id = 1;
   string product = 2;
   string genesis_address = 3;
   uint64 lot_size = 4;
}


enum SettingIndex
{
   SetIdx_Initialized = 0;
   SetIdx_RunLocalArmory = 1;
   SetIdx_NetType = 2;
   SetIdx_ArmoryDbName = 3;
   SetIdx_ArmoryDbIP = 4;
   SetIdx_ArmoryDbPort = 5;
   SetIdx_ArmoryPathName = 6;
   SetIdx_Environment = 7;
   SetIdx_ChatDbFile = 8;
   SetIdx_SavedUsername = 9;
   SetIdx_SignerIndex = 10;
   SetIdx_SignerOfflineDir = 11;
   SetIdx_AutoSignSpendLimit = 12;
   SetIdx_LaunchToTray = 13;
   SetIdx_MinimizeToTray = 14;
   SetIdx_CloseToTray = 15;
   SetIdx_NotifyOnTX = 16;
   SetIdx_DefaultAuthAddr = 17;
   SetIdx_NbAuthAddrsVisible = 18;
   SetIdx_LogDefault = 19;
   SetIdx_LogMessages = 20;
   SetIdx_TxCacheFileName = 21;
   SetIdx_NbBackupFilesKeep = 22;
   SetIdx_AQScripts = 23;
   SetIdx_LastAQScript = 24;
   SetIdx_DropQuoteNotif = 25;
   SetIdx_GUI_MainGeom = 26;
   SetIdx_GUI_MainTab = 27;
   SetIdx_Filter_MD_RFQ = 28;
   SetIdx_Filter_MD_RFQ_Portfolio = 29;
   SetIdx_Filter_MD_QN = 30;
   SetIdx_Filter_MD_QN_cnt = 31;
   SetIdx_ChangeLog_BaseURL = 32;
   SetIdx_Binaries_DownloadURL = 33;
   SetIdx_ResetPasswordURL = 34;
   SetIdx_GetAccount_ProdURL = 35;
   SetIdx_GetAccount_TestURL = 36;
   SetIdx_GetStartedGuideURL = 37;
   SetIdx_WalletFiltering = 38;
   SetIdx_Limit_FxRFQ = 39;
   SetIdx_Limit_XbtRFQ = 40;
   SetIdx_Limit_CcRFQ = 41;
   SetIdx_NoNotifyRFQ = 42;
   SetIdx_PriceUpdateInterval = 43;
   SetIdx_ShowQuoted = 44;
   SetIdx_AdvancedTXisDefault = 45;
   SetIdx_TxFilter = 46;
   SetIdx_SubscribeMDatStart = 47;
   SetIdx_MDLicenseAccepted = 48;
   SetIdx_AuthPrivKey = 49;
   SetIdx_jwtUsername = 50;
   SetIdx_LocalSignerPubKeyPath = 51;
   SetIdx_RemoteSigners = 52;
   SetIdx_RememberLogin = 53;
   SetIdx_ArmoryServers = 54;
   SetIdx_TwoWaySignerAuth = 55;
   SetIdx_ChartProduct = 56;
   SetIdx_ChartTimeframe = 57;
   SetIdx_ChartCandleCount = 58;
   SetIdx_LastAQDir = 59;
   SetIdx_HideLegacyWalletWarn = 60;
   SetIdx_DetailedSettlDisalogByDef = 61;
   SetIdx_AutoStartRFQScript = 62;
   SetIdx_CurrentRFQScript = 63;
   SetIdx_ShowInfoWidget = 64;
   SetIdx_LoginApiKey = 65;
   SetIdx_AutoQuoting = 66;
   SetIdx_AutoSigning = 67;
//   SetIdx_ExtConnName = 68;
//   SetIdx_ExtConnHost = 79;
   SetIdx_ExtConnPort = 70;
   SetIdx_ExtConnPubKey = 71;
   SetIdx_SubmittedAddrXbtLimit = 72;
//   SetIdx_ExtConnOwnPubKey = 73;
}

enum SettingType
{
   SettingType_Unknown = 0;
   SettingType_String  = 1;
   SettingType_Int     = 2;
   SettingType_UInt    = 3;
   SettingType_UInt64  = 4;
   SettingType_Bool    = 5;
   SettingType_Float   = 6;
   SettingType_Rect    = 10;
   SettingType_Strings = 11;
   SettingType_StrMap  = 12;
}

enum SettingSource
{
   SettingSource_Unknown = 0;
   SettingSource_Local   = 1;
}

message SettingRequest
{
   SettingSource source = 1;
   SettingIndex  index  = 2;
   SettingType   type   = 3;
}

message StrKeyVal {
   string key   = 1;
   string value = 2;
}


message SettingResponse
{
   SettingRequest request = 1;

   message RectData {
      int32 left   = 1;
      int32 top    = 2;
      int32 width  = 3;
      int32 height = 4;
   }

   message Strings {
      repeated string strings = 1;
   }

   message StrMap {
      repeated StrKeyVal key_vals = 1;
   }

   oneof data
   {
      string s    = 2;
      int32  i    = 3;
      uint32 ui   = 4;
      uint64 ui64 = 5;
      bool   b    = 6;
      double f    = 7;
      RectData rect = 10;
      Strings  strings = 11;
      StrMap   key_vals = 12;
   }
}

message SettingsMessage
{
   message SettingsRequest
   {
      repeated SettingRequest requests = 1;
   }

   message SettingsResponse
   {
      repeated SettingResponse responses = 1;
   }

   message ArmoryServer
   {
      int32  network_type = 1;
      string server_name  = 2;
      string server_address = 3;
      string server_port = 4;
      string server_key = 5;
      bool   run_locally = 6;
      bool   one_way_auth = 7;
      bytes  password = 8;
   }

   message ArmoryServers
   {
      repeated ArmoryServer servers = 1;
      int32 idx_current = 2;
      int32 idx_connected = 3;
   }

   message ArmoryServerUpdate
   {
      ArmoryServer server = 1;
      int32 index = 2;
   }

   message SignerServer
   {
      string id = 1;
      string name = 2;
      bool   is_local = 3;
      int32  network_type = 4;
      string host = 5;
      string port = 6;
      string key = 7;
      string remote_keys_dir = 8;
      string remote_keys_file = 9;
      repeated StrKeyVal client_keys = 10;
      string home_dir = 11;
      double auto_sign_spend_limit = 12;
   }

   message SignerServers
   {
      repeated SignerServer servers = 1;
      int32  idx_current = 2;
      string own_key = 3;
   }

   message SignerSetKey
   {
      string server_id = 1;
      string new_key = 2;
   }

   message BootstrapData
   {
      bool loaded = 1;
      repeated string auth_validations = 2;
      repeated CCDefinition cc_definitions = 3;
   }

   oneof data
   {
      SettingsRequest    get_request  = 1;
      SettingsResponse   get_response = 2;
      SettingsResponse   put_request = 3;
      SettingsResponse   settings_updated = 4;
      ArmoryServer       armory_server = 5;
      int32              set_armory_server = 6;	// by index
      Empty              armory_servers_get = 7;
      ArmoryServers      armory_servers = 8;
      ArmoryServer       add_armory_server = 9;
      int32              del_armory_server = 10;
      ArmoryServerUpdate upd_armory_server = 11;
      Empty              signer_request = 12;
      SignerServer       signer_response = 13;
      SignerSetKey       signer_set_key = 14;
      Empty              signer_reset = 15;
      Empty              signer_servers_get = 16;
      SignerServers      signer_servers = 17;
      int32              set_signer_server = 18;
      SignerServer       add_signer_server = 19;
      int32              del_signer_server = 20;
      Empty              state_get = 21;
      SettingsResponse   state = 22;
      SettingsRequest    reset = 23;
      SettingsResponse   reset_to_state = 24;
      bytes              load_bootstrap = 25;
      BootstrapData      bootstrap = 26;
   }
}


message AdministrativeMessage
{
   oneof data
   {
      Empty start = 1;
      Empty stop  = 2;
      Empty restart = 3;
      int32 component_created = 4;
      int32 component_loading = 5;
      int32 component_ready = 6;
   }
}


message TradeSettings
{
   uint64 xbt_tier1_limit = 1;
   uint32 xbt_price_band = 2;
   uint32 auth_reqd_settl_trades = 3;
   uint32 auth_submit_addr_limit = 4;
   uint32 dealer_auth_submit_addr_limit = 5;
}

message BsServerMessage
{
   message StartLoginResult
   {
      string login = 1;
      bool   success = 2;
      string error_text = 3;
   }

   message LoginResult
   {
      string login = 1;
      int32  status = 2;
      int32  user_type = 3;
      string error_text = 4;
      string celer_login = 5;
      bytes  chat_token = 6;
      bytes  chat_token_signature = 7;
      bytes  bootstrap_signed_data = 8;
      bool   enabled = 9;
      float  fee_rate = 10;
      TradeSettings trade_settings = 11;
   }

   message MatchingData
   {
      int32  message_type = 1;
      bytes  data = 2;
   }

   oneof data
   {
      Empty            open_connection = 1;
      Empty            connected = 2;
      Empty            disconnected = 3;
      string           start_login = 4;
      Empty            cancel_last_login = 5;
      StartLoginResult start_login_result = 6;
      LoginResult      login_result = 7;
      Empty            close_connection = 8;
      Common.NewKeyCompare pub_new_key_request  = 10;
      bool             pub_new_key_response = 11;
      string           timeout = 12;
      MatchingData     send_matching = 13;
      MatchingData     recv_matching = 14;
   }
}


message MatchingMessage
{
   message Login
   {
      string matching_login = 1;
      string terminal_login = 2;
   }

   message LoggedIn
   {
      int32  user_type = 1;
      string user_id = 2;
      string user_name = 3;
   }

   oneof data
   {
      int32    connection_error = 1;
      Login    login = 2;
      LoggedIn logged_in = 3;
      Empty    logout = 4;
      Empty    logged_out = 5;
   }
}


message AssetsMessage
{
   oneof data
   {
      Empty placeholder = 1;
   }
}


message MktDataMessage
{
   oneof data
   {
      Empty accept_md_agreement = 1;
      Empty md_agreement_accepted = 2;
   }
}


message MDHistMessage
{
   oneof data
   {
      Empty placeholder = 1;
   }
}


message SettlementMessage
{
   oneof data
   {
      Empty placeholder = 1;
   }
}


message ChatMessage
{
   oneof data
   {
      Empty placeholder = 1;
   }
}
