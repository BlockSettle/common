/*

***********************************************************************************
* Copyright (C) 2018 - 2020, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package bs.types;

enum Action
{
    ACTION_UNKNOWN = 0;
    ACTION_CREATED = 1;
    ACTION_UPDATED = 2;
    ACTION_REMOVED = 3;
}

enum Side
{
    SIDE_INVALID = 0;
    SIDE_BUY = 1;
    SIDE_SELL = 2;
}

enum OrderStatus
{
   ORDER_STATUS_UNKNOWN = 0;
   ORDER_STATUS_PENDING = 1;
   ORDER_STATUS_FILLED = 2;
   ORDER_STATUS_VOID = 3;
}

enum PriceBookType
{
   CashSettlePriceBook = 0;
   DeliverablePriceBook = 1;
}

enum PriceRangeId
{
   RangeUndefined  = 0;
   Range_0_1       = 1;
   Range_1_5       = 2;
   Range_5_10      = 3;
   Range_10_25     = 4;
   Range_25_100    = 5;
}

message StreamPriceData
{
   PriceRangeId   range_id = 1;
   double         ask      = 2;
   double         bid      = 3;
}

message SubmitPricesData
{
   string                     product_type   = 1;
   repeated StreamPriceData   prices         = 2;
}

message PullPricesData
{
   string   product_type   = 1;
}

message Order
{
   string      id                = 1;
   OrderStatus status            = 2;
   string      status_text       = 3;
   int64       timestamp_ms      = 4;
   string      product           = 5; // for example "XBT"
   string      product_against   = 6; // for example "EUR"
   Side        side              = 7;
   double      quantity          = 8;
   double      price             = 9;
   int32       trade_type        = 10;
   double      cut_off_price     = 11;
   double      trade_im          = 12;
}

message ChatToken
{
   int64 timestamp_ms = 1;

   string chat_login = 2;

   // bs::network::UserType as int
   int32 user_type = 3;
}

message Balance
{
    string currency = 1;
    double balance = 2;
}

message TradeSettings
{
    uint64 xbt_tier1_limit                   = 1;
    uint32 xbt_price_band                    = 2;
    uint32 auth_required_settled_trades      = 3;
    uint32 auth_submit_address_limit         = 4;
    uint32 dealer_auth_submit_address_limit  = 5;
}

enum ApiKeyError
{
    API_KEY_ERROR_NO_ERROR = 0;
    API_KEY_ERROR_UNKNOWN_KEY = 1;
    API_KEY_ERROR_UNKNOWN_IP_ADDR = 2;
    API_KEY_ERROR_SERVER_ERROR = 3;
}

message WhitelistedAddressRequest
{
    string  address         = 1;
    string  description     = 2;
}

message WhitelistedAddressResponse
{
    string  address         = 1;
    string  description     = 2;
    int64   added_timestamp = 3;
}

enum SubmitWhitelistedAddressError
{
   SUBMIT_WA_NO_ERROR                     = 0;
   // SUBMIT_WA_ERROR_INVALID_ADDRESS - invalid address string format
   SUBMIT_WA_ERROR_INVALID_ADDRESS_FORMAT = 1;
   // SUBMIT_WA_ERROR_INVALID_ADDRESS_TYPE - invalid address type. refer to RTC API doc for accepted types
   SUBMIT_WA_ERROR_INVALID_ADDRESS_TYPE   = 2;
   // SUBMIT_WA_ERROR_INVALID_DESCRIPTION - address description is tool long
   SUBMIT_WA_ERROR_INVALID_DESCRIPTION    = 3;
   // SUBMIT_WA_ERROR_EXCEED_LIMIT - user address limit exceeded. Refer to RTC doc
   SUBMIT_WA_ERROR_EXCEED_LIMIT           = 4;
}
